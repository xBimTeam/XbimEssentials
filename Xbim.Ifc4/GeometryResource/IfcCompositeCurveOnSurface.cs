// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc4.Interfaces;
using Xbim.Ifc4.GeometryResource;
//## Custom using statements
//##

namespace Xbim.Ifc4.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcCompositeCurveOnSurface
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcCompositeCurveOnSurface : IIfcCompositeCurve, IfcCurveOnSurface
	{
		List<IfcSurface> @BasisSurface  { get ; }
	
	}
}

namespace Xbim.Ifc4.GeometryResource
{
	[ExpressType("IfcCompositeCurveOnSurface", 1130)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcCompositeCurveOnSurface : IfcCompositeCurve, IInstantiableEntity, IIfcCompositeCurveOnSurface, IEquatable<@IfcCompositeCurveOnSurface>
	{
		#region IIfcCompositeCurveOnSurface explicit implementation
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcCompositeCurveOnSurface(IModel model) : base(model) 		{ 
			Model = model; 
		}



		#region Derived attributes
		[EntityAttribute(0, EntityAttributeState.Derived, EntityAttributeType.Set, EntityAttributeType.Class, 0, 1, 0)]
		public List<IfcSurface> @BasisSurface 
		{
			get 
			{
				//## Getter for BasisSurface
			    return IfcGetBasisSurface(this).ToList();
			    //##
			}
		}

		#endregion



		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcCompositeCurveOnSurface other)
	    {
	        return this == other;
	    }

	    public override bool Equals(object obj)
        {
            // Check for null
            if (obj == null) return false;

            // Check for type
            if (GetType() != obj.GetType()) return false;

            // Cast as @IfcCompositeCurveOnSurface
            var root = (@IfcCompositeCurveOnSurface)obj;
            return this == root;
        }
        public override int GetHashCode()
        {
            //good enough as most entities will be in collections of  only one model, equals distinguishes for model
            return EntityLabel.GetHashCode(); 
        }

        public static bool operator ==(@IfcCompositeCurveOnSurface left, @IfcCompositeCurveOnSurface right)
        {
            // If both are null, or both are same instance, return true.
            if (ReferenceEquals(left, right))
                return true;

            // If one is null, but not both, return false.
            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
                return false;

            return (left.EntityLabel == right.EntityLabel) && (left.Model == right.Model);

        }

        public static bool operator !=(@IfcCompositeCurveOnSurface left, @IfcCompositeCurveOnSurface right)
        {
            return !(left == right);
        }

        public static bool operator ==(@IfcCompositeCurveOnSurface left, IfcCurveOnSurface right)
		{
			return left == right as @IfcCompositeCurveOnSurface;
		}

		public static bool operator !=(@IfcCompositeCurveOnSurface left, IfcCurveOnSurface right)
		{
			return !(left == right);
		}

        #endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
        private static IEnumerable<IfcSurface> IfcGetBasisSurface(IfcCurveOnSurface curveOnSurface)
        {
            var pc = curveOnSurface as IfcPcurve;
            if (pc != null)
            {
                yield return pc.BasisSurface;
                yield break;
            }

            var ccos = curveOnSurface as IfcCompositeCurveOnSurface;
            if (ccos == null)
                yield break;

            foreach (var segment in ccos.Segments)
            {
                var curve = segment.ParentCurve as IfcCurveOnSurface;
                if (curve == null) continue;
                foreach (var surface in IfcGetBasisSurface(curve))
                {
                    yield return surface;
                }
            }
        }
  
		//##
		#endregion
	}
}