// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc4.Interfaces;
using Xbim.Ifc4.MeasureResource;
using Xbim.Ifc4.ProductExtension;
using Xbim.Ifc4x1.Interfaces;
//## Custom using statements
//##

namespace Xbim.Ifc4x1.Interfaces
{
    /// <summary>
    /// Readonly interface for IfcAlignment
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart
    public partial interface @IIfcAlignment : IIfcPositioningElement
    {
        IfcAlignmentTypeEnum? PredefinedType { get; set; }

        IIfcAlignment2DHorizontal Horizontal { get; set; }

        IIfcAlignment2DVertical Vertical { get; set; }

        IfcLabel? LinearRefMethod { get; set; }
    }
}

namespace Xbim.Ifc4x1.ProductExtension
{
    [ExpressType("IfcAlignment", 9001)]
    // ReSharper disable once PartialTypeWithSinglePart
    public partial class @IfcAlignment : IfcPositioningElement, IIfcAlignment, IEquatable<@IfcAlignment>
    {
        #region IIfcAlignment explicit implementation

        IfcAlignmentTypeEnum? IIfcAlignment.PredefinedType {
            get { return @PredefinedType;  }
            set { @PredefinedType = value; }
        }

        IIfcAlignment2DHorizontal IIfcAlignment.Horizontal
        {
            get { return @Horizontal; }
            set { @Horizontal = value; }
        }

        IIfcAlignment2DVertical IIfcAlignment.Vertical
        {
            get { return @Vertical; }
            set { @Vertical = value; }
        }

        IfcLabel? IIfcAlignment.LinearRefMethod
        {
            get { return @LinearRefMethod; }
            set { @LinearRefMethod = value; }
        }
        #endregion

        //internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
        internal IfcAlignment(IModel model, int label, bool activated) : base(model, label, activated)
        {
        }

        #region Explicit attribute fields
        private IfcAlignmentTypeEnum? _predefinedType;
        private IIfcAlignment2DHorizontal _horizontal;
        private IIfcAlignment2DVertical _vertical;
        private IfcLabel? _linearRefMethod;
        #endregion

        #region Explicit attribute properties
        [EntityAttribute(8, EntityAttributeState.Optional, EntityAttributeType.Enum, EntityAttributeType.None, -1, -1, 19)]
        public IfcAlignmentTypeEnum? @PredefinedType
        {
            get
            {
                if (_activated) return _predefinedType;
                Activate();
                return _predefinedType;
            }
            set
            {
                SetValue(v => _predefinedType = v, _predefinedType, value, "PredefinedType", 8);
            }
        }
        [EntityAttribute(9, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 20)]
        public IIfcAlignment2DHorizontal @Horizontal
        {
            get
            {
                if (_activated) return _horizontal;
                Activate();
                return _horizontal;
            }
            set
            {
                SetValue(v => _horizontal = v, _horizontal, value, "Horizontal", 9);
            }
        }
        //TODO: Vertical
        [EntityAttribute(10, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 21)]
        public IIfcAlignment2DVertical @Vertical
        {
            get
            {
                if (_activated) return _vertical;
                Activate();
                return _vertical;
            }
            set
            {
                SetValue(v => _vertical = v, _vertical, value, "Vertical", 10);
            }
        }
        [EntityAttribute(11, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 22)]
        public IfcLabel? @LinearRefMethod
        {
            get
            {
                if (_activated) return _linearRefMethod;
                Activate();
                return _linearRefMethod;
            }
            set
            {
                SetValue(v => _linearRefMethod = v, _linearRefMethod, value, "LinearRefMethod", 11);
            }
        }
        #endregion

        #region IPersist implementation
        public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
        {
            switch (propIndex)
            {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    base.Parse(propIndex, value, nestedIndex);
                    return;
                case 7:
                    _predefinedType = (IfcAlignmentTypeEnum)System.Enum.Parse(typeof(IfcAlignmentTypeEnum), value.EnumVal, true);
                    return;
                case 8:
                    _horizontal = (IIfcAlignment2DHorizontal)(value.EntityVal);
                    return;
                case 9:
                    _vertical = (IIfcAlignment2DVertical)(value.EntityVal); 
                    return;
                case 11:
                    _linearRefMethod = value.StringVal;
                    return;
                default:
                    throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
            }
        }
        #endregion

        #region Equality comparers and operators
        public bool Equals(@IfcAlignment other)
        {
            return this == other;
        }
        #endregion

        #region Custom code (will survive code regeneration)
        //## Custom code
        //##
        #endregion
    }
}