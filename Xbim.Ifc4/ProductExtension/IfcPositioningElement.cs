// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.StructuralAnalysisDomain;
using Xbim.Ifc4.Kernel;
using Xbim.Ifc4.MeasureResource;
using Xbim.Ifc4.SharedBldgElements;
using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc4.Interfaces;
using Xbim.Ifc4.ProductExtension;
using Xbim.Ifc4x1.Interfaces;
//## Custom using statements
//##

namespace Xbim.Ifc4x1.Interfaces
{
    /// <summary>
    /// Readonly interface for IfcPositioningElement
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart
    public partial interface IIfcPositioningElement : IIfcProduct
    {
    }
}

namespace Xbim.Ifc4x1.ProductExtension
{
    [ExpressType("IfcPositioningElement", 9002)]
    // ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class IfcPositioningElement : IfcProduct, IIfcPositioningElement, IInstantiableEntity
    {
        //internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
        internal IfcPositioningElement(IModel model, int label, bool activated) : base(model, label, activated)
        {
        }

        #region IPersist implementation
        public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
        {
            switch (propIndex)
            {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    base.Parse(propIndex, value, nestedIndex);
                    return;
                default:
                    throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
            }
        }
        #endregion

        #region Custom code (will survive code regeneration)
        //## Custom code
        //##
        #endregion
    }
}