// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc4;
using Xbim.Ifc4.Interfaces;
using Xbim.Ifc4.GeometricConstraintResource;
using Xbim.Ifc4.MeasureResource;
using Xbim.Ifc4x1.Interfaces;

//## Custom using statements
//##

namespace Xbim.Ifc4x1.Interfaces
{
    /// <summary>
    /// Readonly interface for IfcAlignment2DHorizontal
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart
    public partial interface @IIfcAlignment2DHorizontal : IPersistEntity
    {
        IfcLengthMeasure? @StartDistAlong { get; set; }
        IItemSet<IIfcAlignment2DHorizontalSegment> @Segments { get; }
        IEnumerable<IIfcAlignment> @ToAlignment { get; }
    }
}

namespace Xbim.Ifc4x1.GeometricConstraintResource
{
    [ExpressType("IfcAlignment2DHorizontal", 9003)]
    // ReSharper disable once PartialTypeWithSinglePart
    public partial class @IfcAlignment2DHorizontal : PersistEntity, IInstantiableEntity, IIfcAlignment2DHorizontal, IContainsEntityReferences, IEquatable<@IfcAlignment2DHorizontal>
    {
        #region IIfcAlignment2DHorizontal explicit implementation
        IfcLengthMeasure? IIfcAlignment2DHorizontal.StartDistAlong {
            get { return @StartDistAlong; }
            set { @StartDistAlong = value; }
        }
        IItemSet<IIfcAlignment2DHorizontalSegment> IIfcAlignment2DHorizontal.Segments {
            get { return @Segments; }
        }
        IEnumerable<IIfcAlignment> IIfcAlignment2DHorizontal.ToAlignment {
            get { return @ToAlignment; }
        }
        #endregion

        //internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
        internal IfcAlignment2DHorizontal(IModel model, int label, bool activated) : base(model, label, activated)
        {
            _segments = new ItemSet<IIfcAlignment2DHorizontalSegment>(this, 0, 2);
        }

        #region Explicit attribute fields
        private IfcLengthMeasure? _startDistAlong;
        private ItemSet<IIfcAlignment2DHorizontalSegment> _segments;
        #endregion

        #region Explicit attribute properties
        [EntityAttribute(1, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 1)]
        public IfcLengthMeasure? @StartDistAlong
        {
            get
            {
                if (_activated) return _startDistAlong;
                Activate();
                return _startDistAlong;
            }
            set
            {
                SetValue(v => _startDistAlong = v, _startDistAlong, value, "StartDistance", 1);
            }
        }
        [EntityAttribute(2, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, 1, -1, 2)]
        public IItemSet<IIfcAlignment2DHorizontalSegment> @Segments
        {
            get
            {
                if (_activated) return _segments;
                Activate();
                return _segments;
            }
        }
        #endregion

        #region Inverse attributes
        [InverseProperty("Horizontal")]
        [EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, 1, -1, 3)]
        public IEnumerable<IIfcAlignment> @ToAlignment
        {
            get
            {
                return Model.Instances.Where<IIfcAlignment>(e => e.Horizontal != null && e.Horizontal.Equals(this), "Horizontal", this);
            }
        }
        #endregion

        #region IPersist implementation
        public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
        {
            switch (propIndex)
            {
                case 0:
                    _startDistAlong = (IfcLengthMeasure?)(value.RealVal);
                    return;
                case 1:
                    _segments.InternalAdd((IIfcAlignment2DHorizontalSegment)(value.EntityVal));
                    return;
                default:
                    throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
            }
        }
        #endregion

        #region Equality comparers and operators
        public bool Equals(@IfcAlignment2DHorizontal other)
        {
            return this == other;
        }
        #endregion

        #region IContainsEntityReferences
        IEnumerable<IPersistEntity> IContainsEntityReferences.References
        {
            get
            {
                foreach (var segment in @Segments)
                    yield return segment;
            }
        }
        #endregion

        #region Custom code (will survive code regeneration)
        //## Custom code
        //##
        #endregion
    }
}
