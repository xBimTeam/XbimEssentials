// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.CobieExpress.Interfaces;
using Xbim.CobieExpress;
//## Custom using statements
//##

namespace Xbim.CobieExpress.Interfaces
{
	/// <summary>
    /// Readonly interface for CobieType
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @ICobieType : ICobieTypeOrComponent
	{
		ICobieAssetType @AssetType { get; }
		ICobieContact @Manufacturer { get; }
		string @ModelNumber { get; }
		ICobieWarranty @Warranty { get; }
		double? @ReplacementCost { get; }
		double? @ExpectedLife { get; }
		ICobieDurationUnit @DurationUnit { get; }
		double? @NominalLength { get; }
		double? @NominalWidth { get; }
		double? @NominalHeight { get; }
		string @ModelReference { get; }
		string @Shape { get; }
		string @Size { get; }
		string @Color { get; }
		string @Finish { get; }
		string @Grade { get; }
		string @Material { get; }
		string @Constituents { get; }
		string @Features { get; }
		string @AccessibilityPerformance { get; }
		string @CodePerformance { get; }
		string @SustainabilityPerformance { get; }
		IEnumerable<ICobieComponent> @Components {  get; }
		IEnumerable<ICobieSpare> @Spares {  get; }
		IEnumerable<ICobieJob> @Jobs {  get; }
	
	}
}

namespace Xbim.CobieExpress
{
	[ExpressType("Type", 21)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @CobieType : CobieTypeOrComponent, IInstantiableEntity, ICobieType, IEquatable<@CobieType>
	{
		#region ICobieType explicit implementation
		ICobieAssetType ICobieType.AssetType { get { return @AssetType; } }	
		ICobieContact ICobieType.Manufacturer { get { return @Manufacturer; } }	
		string ICobieType.ModelNumber { get { return @ModelNumber; } }	
		ICobieWarranty ICobieType.Warranty { get { return @Warranty; } }	
		double? ICobieType.ReplacementCost { get { return @ReplacementCost; } }	
		double? ICobieType.ExpectedLife { get { return @ExpectedLife; } }	
		ICobieDurationUnit ICobieType.DurationUnit { get { return @DurationUnit; } }	
		double? ICobieType.NominalLength { get { return @NominalLength; } }	
		double? ICobieType.NominalWidth { get { return @NominalWidth; } }	
		double? ICobieType.NominalHeight { get { return @NominalHeight; } }	
		string ICobieType.ModelReference { get { return @ModelReference; } }	
		string ICobieType.Shape { get { return @Shape; } }	
		string ICobieType.Size { get { return @Size; } }	
		string ICobieType.Color { get { return @Color; } }	
		string ICobieType.Finish { get { return @Finish; } }	
		string ICobieType.Grade { get { return @Grade; } }	
		string ICobieType.Material { get { return @Material; } }	
		string ICobieType.Constituents { get { return @Constituents; } }	
		string ICobieType.Features { get { return @Features; } }	
		string ICobieType.AccessibilityPerformance { get { return @AccessibilityPerformance; } }	
		string ICobieType.CodePerformance { get { return @CodePerformance; } }	
		string ICobieType.SustainabilityPerformance { get { return @SustainabilityPerformance; } }	
		 
		IEnumerable<ICobieComponent> ICobieType.Components {  get { return @Components; } }
		IEnumerable<ICobieSpare> ICobieType.Spares {  get { return @Spares; } }
		IEnumerable<ICobieJob> ICobieType.Jobs {  get { return @Jobs; } }
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal CobieType(IModel model) : base(model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private CobieAssetType _assetType;
		private CobieContact _manufacturer;
		private string _modelNumber;
		private CobieWarranty _warranty;
		private double? _replacementCost;
		private double? _expectedLife;
		private CobieDurationUnit _durationUnit;
		private double? _nominalLength;
		private double? _nominalWidth;
		private double? _nominalHeight;
		private string _modelReference;
		private string _shape;
		private string _size;
		private string _color;
		private string _finish;
		private string _grade;
		private string _material;
		private string _constituents;
		private string _features;
		private string _accessibilityPerformance;
		private string _codePerformance;
		private string _sustainabilityPerformance;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(14, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 19)]
		public CobieAssetType @AssetType 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _assetType;
				((IPersistEntity)this).Activate(false);
				return _assetType;
			} 
			set
			{
				SetValue( v =>  _assetType = v, _assetType, value,  "AssetType", 14);
			} 
		}	
		[EntityAttribute(15, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 20)]
		public CobieContact @Manufacturer 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _manufacturer;
				((IPersistEntity)this).Activate(false);
				return _manufacturer;
			} 
			set
			{
				SetValue( v =>  _manufacturer = v, _manufacturer, value,  "Manufacturer", 15);
			} 
		}	
		[EntityAttribute(16, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 21)]
		public string @ModelNumber 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _modelNumber;
				((IPersistEntity)this).Activate(false);
				return _modelNumber;
			} 
			set
			{
				SetValue( v =>  _modelNumber = v, _modelNumber, value,  "ModelNumber", 16);
			} 
		}	
		[EntityAttribute(17, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 22)]
		public CobieWarranty @Warranty 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _warranty;
				((IPersistEntity)this).Activate(false);
				return _warranty;
			} 
			set
			{
				SetValue( v =>  _warranty = v, _warranty, value,  "Warranty", 17);
			} 
		}	
		[EntityAttribute(18, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 23)]
		public double? @ReplacementCost 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _replacementCost;
				((IPersistEntity)this).Activate(false);
				return _replacementCost;
			} 
			set
			{
				SetValue( v =>  _replacementCost = v, _replacementCost, value,  "ReplacementCost", 18);
			} 
		}	
		[EntityAttribute(19, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 24)]
		public double? @ExpectedLife 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _expectedLife;
				((IPersistEntity)this).Activate(false);
				return _expectedLife;
			} 
			set
			{
				SetValue( v =>  _expectedLife = v, _expectedLife, value,  "ExpectedLife", 19);
			} 
		}	
		[EntityAttribute(20, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 25)]
		public CobieDurationUnit @DurationUnit 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _durationUnit;
				((IPersistEntity)this).Activate(false);
				return _durationUnit;
			} 
			set
			{
				SetValue( v =>  _durationUnit = v, _durationUnit, value,  "DurationUnit", 20);
			} 
		}	
		[EntityAttribute(21, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 26)]
		public double? @NominalLength 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _nominalLength;
				((IPersistEntity)this).Activate(false);
				return _nominalLength;
			} 
			set
			{
				SetValue( v =>  _nominalLength = v, _nominalLength, value,  "NominalLength", 21);
			} 
		}	
		[EntityAttribute(22, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 27)]
		public double? @NominalWidth 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _nominalWidth;
				((IPersistEntity)this).Activate(false);
				return _nominalWidth;
			} 
			set
			{
				SetValue( v =>  _nominalWidth = v, _nominalWidth, value,  "NominalWidth", 22);
			} 
		}	
		[EntityAttribute(23, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 28)]
		public double? @NominalHeight 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _nominalHeight;
				((IPersistEntity)this).Activate(false);
				return _nominalHeight;
			} 
			set
			{
				SetValue( v =>  _nominalHeight = v, _nominalHeight, value,  "NominalHeight", 23);
			} 
		}	
		[EntityAttribute(24, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 29)]
		public string @ModelReference 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _modelReference;
				((IPersistEntity)this).Activate(false);
				return _modelReference;
			} 
			set
			{
				SetValue( v =>  _modelReference = v, _modelReference, value,  "ModelReference", 24);
			} 
		}	
		[EntityAttribute(25, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 30)]
		public string @Shape 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _shape;
				((IPersistEntity)this).Activate(false);
				return _shape;
			} 
			set
			{
				SetValue( v =>  _shape = v, _shape, value,  "Shape", 25);
			} 
		}	
		[EntityAttribute(26, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 31)]
		public string @Size 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _size;
				((IPersistEntity)this).Activate(false);
				return _size;
			} 
			set
			{
				SetValue( v =>  _size = v, _size, value,  "Size", 26);
			} 
		}	
		[EntityAttribute(27, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 32)]
		public string @Color 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _color;
				((IPersistEntity)this).Activate(false);
				return _color;
			} 
			set
			{
				SetValue( v =>  _color = v, _color, value,  "Color", 27);
			} 
		}	
		[EntityAttribute(28, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 33)]
		public string @Finish 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _finish;
				((IPersistEntity)this).Activate(false);
				return _finish;
			} 
			set
			{
				SetValue( v =>  _finish = v, _finish, value,  "Finish", 28);
			} 
		}	
		[EntityAttribute(29, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 34)]
		public string @Grade 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _grade;
				((IPersistEntity)this).Activate(false);
				return _grade;
			} 
			set
			{
				SetValue( v =>  _grade = v, _grade, value,  "Grade", 29);
			} 
		}	
		[EntityAttribute(30, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 35)]
		public string @Material 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _material;
				((IPersistEntity)this).Activate(false);
				return _material;
			} 
			set
			{
				SetValue( v =>  _material = v, _material, value,  "Material", 30);
			} 
		}	
		[EntityAttribute(31, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 36)]
		public string @Constituents 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _constituents;
				((IPersistEntity)this).Activate(false);
				return _constituents;
			} 
			set
			{
				SetValue( v =>  _constituents = v, _constituents, value,  "Constituents", 31);
			} 
		}	
		[EntityAttribute(32, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 37)]
		public string @Features 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _features;
				((IPersistEntity)this).Activate(false);
				return _features;
			} 
			set
			{
				SetValue( v =>  _features = v, _features, value,  "Features", 32);
			} 
		}	
		[EntityAttribute(33, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 38)]
		public string @AccessibilityPerformance 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _accessibilityPerformance;
				((IPersistEntity)this).Activate(false);
				return _accessibilityPerformance;
			} 
			set
			{
				SetValue( v =>  _accessibilityPerformance = v, _accessibilityPerformance, value,  "AccessibilityPerformance", 33);
			} 
		}	
		[EntityAttribute(34, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 39)]
		public string @CodePerformance 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _codePerformance;
				((IPersistEntity)this).Activate(false);
				return _codePerformance;
			} 
			set
			{
				SetValue( v =>  _codePerformance = v, _codePerformance, value,  "CodePerformance", 34);
			} 
		}	
		[EntityAttribute(35, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 40)]
		public string @SustainabilityPerformance 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _sustainabilityPerformance;
				((IPersistEntity)this).Activate(false);
				return _sustainabilityPerformance;
			} 
			set
			{
				SetValue( v =>  _sustainabilityPerformance = v, _sustainabilityPerformance, value,  "SustainabilityPerformance", 35);
			} 
		}	
		#endregion



		#region Inverse attributes
		[InverseProperty("Type")]
		[EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, -1, -1, 41)]
		public IEnumerable<CobieComponent> @Components 
		{ 
			get 
			{
				return Model.Instances.Where<CobieComponent>(e => Equals(e.Type), "Type", this);
			} 
		}
		[InverseProperty("Type")]
		[EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, -1, -1, 42)]
		public IEnumerable<CobieSpare> @Spares 
		{ 
			get 
			{
				return Model.Instances.Where<CobieSpare>(e => Equals(e.Type), "Type", this);
			} 
		}
		[InverseProperty("Type")]
		[EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, -1, -1, 43)]
		public IEnumerable<CobieJob> @Jobs 
		{ 
			get 
			{
				return Model.Instances.Where<CobieJob>(e => Equals(e.Type), "Type", this);
			} 
		}
		#endregion


		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
				case 5: 
				case 6: 
				case 7: 
				case 8: 
				case 9: 
				case 10: 
				case 11: 
				case 12: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 13: 
					_assetType = (CobieAssetType)(value.EntityVal);
					return;
				case 14: 
					_manufacturer = (CobieContact)(value.EntityVal);
					return;
				case 15: 
					_modelNumber = value.StringVal;
					return;
				case 16: 
					_warranty = (CobieWarranty)(value.EntityVal);
					return;
				case 17: 
					_replacementCost = value.RealVal;
					return;
				case 18: 
					_expectedLife = value.RealVal;
					return;
				case 19: 
					_durationUnit = (CobieDurationUnit)(value.EntityVal);
					return;
				case 20: 
					_nominalLength = value.RealVal;
					return;
				case 21: 
					_nominalWidth = value.RealVal;
					return;
				case 22: 
					_nominalHeight = value.RealVal;
					return;
				case 23: 
					_modelReference = value.StringVal;
					return;
				case 24: 
					_shape = value.StringVal;
					return;
				case 25: 
					_size = value.StringVal;
					return;
				case 26: 
					_color = value.StringVal;
					return;
				case 27: 
					_finish = value.StringVal;
					return;
				case 28: 
					_grade = value.StringVal;
					return;
				case 29: 
					_material = value.StringVal;
					return;
				case 30: 
					_constituents = value.StringVal;
					return;
				case 31: 
					_features = value.StringVal;
					return;
				case 32: 
					_accessibilityPerformance = value.StringVal;
					return;
				case 33: 
					_codePerformance = value.StringVal;
					return;
				case 34: 
					_sustainabilityPerformance = value.StringVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@CobieType other)
	    {
	        return this == other;
	    }

	    public override bool Equals(object obj)
        {
            // Check for null
            if (obj == null) return false;

            // Check for type
            if (GetType() != obj.GetType()) return false;

            // Cast as @CobieType
            var root = (@CobieType)obj;
            return this == root;
        }
        public override int GetHashCode()
        {
            //good enough as most entities will be in collections of  only one model, equals distinguishes for model
            return EntityLabel.GetHashCode(); 
        }

        public static bool operator ==(@CobieType left, @CobieType right)
        {
            // If both are null, or both are same instance, return true.
            if (ReferenceEquals(left, right))
                return true;

            // If one is null, but not both, return false.
            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
                return false;

            return (left.EntityLabel == right.EntityLabel) && (left.Model == right.Model);

        }

        public static bool operator !=(@CobieType left, @CobieType right)
        {
            return !(left == right);
        }

        #endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}