// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Xbim.Ifc2x3.GeometryResource;
using Xbim.Ifc2x3.FacilitiesMgmtDomain;
using Xbim.Ifc2x3.Kernel;
using Xbim.Ifc2x3.ActorResource;
using Xbim.Ifc2x3.BuildingcontrolsDomain;
using Xbim.Ifc2x3.HVACDomain;
using Xbim.Ifc2x3.PresentationDimensioningResource;
using Xbim.Ifc2x3.ProductExtension;
using Xbim.Ifc2x3.PresentationDefinitionResource;
using Xbim.Ifc2x3.UtilityResource;
using Xbim.Ifc2x3.CostResource;
using Xbim.Ifc2x3.ApprovalResource;
using Xbim.Ifc2x3.ProfileResource;
using Xbim.Ifc2x3.SharedFacilitiesElements;
using Xbim.Ifc2x3.SharedBldgElements;
using Xbim.Ifc2x3.PresentationAppearanceResource;
using Xbim.Ifc2x3.GeometricModelResource;
using Xbim.Ifc2x3.StructuralLoadResource;
using Xbim.Ifc2x3.StructuralElementsDomain;
using Xbim.Ifc2x3.ElectricalDomain;
using Xbim.Ifc2x3.DateTimeResource;
using Xbim.Ifc2x3.SharedComponentElements;
using Xbim.Ifc2x3.ExternalReferenceResource;
using Xbim.Ifc2x3.TopologyResource;
using Xbim.Ifc2x3.PresentationResource;
using Xbim.Ifc2x3.PropertyResource;
using Xbim.Ifc2x3.GeometricConstraintResource;
using Xbim.Ifc2x3.ConstraintResource;
using Xbim.Ifc2x3.ConstructionMgmtDomain;
using Xbim.Ifc2x3.MeasureResource;
using Xbim.Ifc2x3.SharedMgmtElements;
using Xbim.Ifc2x3.SharedBldgServiceElements;
using Xbim.Ifc2x3.MaterialPropertyResource;
using Xbim.Ifc2x3.PlumbingFireProtectionDomain;
using Xbim.Ifc2x3.ProfilePropertyResource;
using Xbim.Ifc2x3.RepresentationResource;
using Xbim.Ifc2x3.TimeSeriesResource;
using Xbim.Ifc2x3.PresentationOrganizationResource;
using Xbim.Ifc2x3.MaterialResource;
using Xbim.Ifc2x3.ControlExtension;
using Xbim.Ifc2x3.ArchitectureDomain;
using Xbim.Ifc2x3.QuantityResource;
using Xbim.Ifc2x3.ProcessExtension;
using Xbim.Ifc2x3.StructuralAnalysisDomain;
using Xbim.Common;

namespace Xbim.Ifc2x3
{
	public sealed class EntityFactory : IEntityFactory
	{
		public T New<T>(IModel model, int entityLabel, bool activated) where T: IInstantiableEntity
		{
			return (T)New(model, typeof(T), entityLabel, activated);
		}

		public T New<T>(IModel model, Action<T> init, int entityLabel, bool activated) where T: IInstantiableEntity
		{
			var o = New<T>(model, entityLabel, activated);
			init(o);
			return o;
		}

		public IInstantiableEntity New(IModel model, Type t, int entityLabel, bool activated)
		{
			//check that the type is from this assembly
			if(t.Assembly != GetType().Assembly)
				throw new Exception("This factory only creates types from its assembly");

			return New(model, t.Name, entityLabel, activated);
		}

		public IInstantiableEntity New(IModel model, string typeName, int entityLabel, bool activated)
		{
			if (model == null || typeName == null)
				throw new ArgumentNullException();

			var name = typeName.ToUpper();
			switch(name)
			{
				case "IFC2DCOMPOSITECURVE": return new Ifc2DCompositeCurve ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCACTIONREQUEST": return new IfcActionRequest ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCACTOR": return new IfcActor ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCACTORROLE": return new IfcActorRole ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCACTUATORTYPE": return new IfcActuatorType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCAIRTERMINALBOXTYPE": return new IfcAirTerminalBoxType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCAIRTERMINALTYPE": return new IfcAirTerminalType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCAIRTOAIRHEATRECOVERYTYPE": return new IfcAirToAirHeatRecoveryType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCALARMTYPE": return new IfcAlarmType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCANGULARDIMENSION": return new IfcAngularDimension ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCANNOTATION": return new IfcAnnotation ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCANNOTATIONCURVEOCCURRENCE": return new IfcAnnotationCurveOccurrence ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCANNOTATIONFILLAREA": return new IfcAnnotationFillArea ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCANNOTATIONFILLAREAOCCURRENCE": return new IfcAnnotationFillAreaOccurrence ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCANNOTATIONSURFACE": return new IfcAnnotationSurface ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCANNOTATIONSURFACEOCCURRENCE": return new IfcAnnotationSurfaceOccurrence ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCANNOTATIONSYMBOLOCCURRENCE": return new IfcAnnotationSymbolOccurrence ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCANNOTATIONTEXTOCCURRENCE": return new IfcAnnotationTextOccurrence ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCAPPLICATION": return new IfcApplication ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCAPPLIEDVALUERELATIONSHIP": return new IfcAppliedValueRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCAPPROVAL": return new IfcApproval ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCAPPROVALACTORRELATIONSHIP": return new IfcApprovalActorRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCAPPROVALPROPERTYRELATIONSHIP": return new IfcApprovalPropertyRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCAPPROVALRELATIONSHIP": return new IfcApprovalRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCARBITRARYCLOSEDPROFILEDEF": return new IfcArbitraryClosedProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCARBITRARYOPENPROFILEDEF": return new IfcArbitraryOpenProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCARBITRARYPROFILEDEFWITHVOIDS": return new IfcArbitraryProfileDefWithVoids ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCASSET": return new IfcAsset ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCASYMMETRICISHAPEPROFILEDEF": return new IfcAsymmetricIShapeProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCAXIS1PLACEMENT": return new IfcAxis1Placement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCAXIS2PLACEMENT2D": return new IfcAxis2Placement2D ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCAXIS2PLACEMENT3D": return new IfcAxis2Placement3D ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCBEAM": return new IfcBeam ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCBEAMTYPE": return new IfcBeamType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCBEZIERCURVE": return new IfcBezierCurve ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCBLOBTEXTURE": return new IfcBlobTexture ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCBLOCK": return new IfcBlock ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCBOILERTYPE": return new IfcBoilerType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCBOOLEANCLIPPINGRESULT": return new IfcBooleanClippingResult ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCBOOLEANRESULT": return new IfcBooleanResult ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCBOUNDARYEDGECONDITION": return new IfcBoundaryEdgeCondition ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCBOUNDARYFACECONDITION": return new IfcBoundaryFaceCondition ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCBOUNDARYNODECONDITION": return new IfcBoundaryNodeCondition ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCBOUNDARYNODECONDITIONWARPING": return new IfcBoundaryNodeConditionWarping ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCBOUNDEDSURFACE": return new IfcBoundedSurface ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCBOUNDINGBOX": return new IfcBoundingBox ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCBOXEDHALFSPACE": return new IfcBoxedHalfSpace ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCBUILDING": return new IfcBuilding ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCBUILDINGELEMENTPART": return new IfcBuildingElementPart ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCBUILDINGELEMENTPROXY": return new IfcBuildingElementProxy ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCBUILDINGELEMENTPROXYTYPE": return new IfcBuildingElementProxyType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCBUILDINGSTOREY": return new IfcBuildingStorey ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCSHAPEPROFILEDEF": return new IfcCShapeProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCABLECARRIERFITTINGTYPE": return new IfcCableCarrierFittingType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCABLECARRIERSEGMENTTYPE": return new IfcCableCarrierSegmentType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCABLESEGMENTTYPE": return new IfcCableSegmentType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCALENDARDATE": return new IfcCalendarDate ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCARTESIANPOINT": return new IfcCartesianPoint ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCARTESIANTRANSFORMATIONOPERATOR2D": return new IfcCartesianTransformationOperator2D ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM": return new IfcCartesianTransformationOperator2DnonUniform ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCARTESIANTRANSFORMATIONOPERATOR3D": return new IfcCartesianTransformationOperator3D ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM": return new IfcCartesianTransformationOperator3DnonUniform ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCENTERLINEPROFILEDEF": return new IfcCenterLineProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCHAMFEREDGEFEATURE": return new IfcChamferEdgeFeature ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCHILLERTYPE": return new IfcChillerType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCIRCLE": return new IfcCircle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCIRCLEHOLLOWPROFILEDEF": return new IfcCircleHollowProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCIRCLEPROFILEDEF": return new IfcCircleProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCLASSIFICATION": return new IfcClassification ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCLASSIFICATIONITEM": return new IfcClassificationItem ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCLASSIFICATIONITEMRELATIONSHIP": return new IfcClassificationItemRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCLASSIFICATIONNOTATION": return new IfcClassificationNotation ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCLASSIFICATIONNOTATIONFACET": return new IfcClassificationNotationFacet ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCLASSIFICATIONREFERENCE": return new IfcClassificationReference ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCLOSEDSHELL": return new IfcClosedShell ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCOILTYPE": return new IfcCoilType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCOLOURRGB": return new IfcColourRgb ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCOLUMN": return new IfcColumn ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCOLUMNTYPE": return new IfcColumnType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCOMPLEXPROPERTY": return new IfcComplexProperty ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCOMPOSITECURVE": return new IfcCompositeCurve ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCOMPOSITECURVESEGMENT": return new IfcCompositeCurveSegment ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCOMPOSITEPROFILEDEF": return new IfcCompositeProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCOMPRESSORTYPE": return new IfcCompressorType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCONDENSERTYPE": return new IfcCondenserType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCONDITION": return new IfcCondition ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCONDITIONCRITERION": return new IfcConditionCriterion ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCONNECTEDFACESET": return new IfcConnectedFaceSet ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCONNECTIONCURVEGEOMETRY": return new IfcConnectionCurveGeometry ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCONNECTIONPOINTECCENTRICITY": return new IfcConnectionPointEccentricity ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCONNECTIONPOINTGEOMETRY": return new IfcConnectionPointGeometry ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCONNECTIONPORTGEOMETRY": return new IfcConnectionPortGeometry ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCONNECTIONSURFACEGEOMETRY": return new IfcConnectionSurfaceGeometry ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCONSTRAINTAGGREGATIONRELATIONSHIP": return new IfcConstraintAggregationRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCONSTRAINTCLASSIFICATIONRELATIONSHIP": return new IfcConstraintClassificationRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCONSTRAINTRELATIONSHIP": return new IfcConstraintRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCONSTRUCTIONEQUIPMENTRESOURCE": return new IfcConstructionEquipmentResource ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCONSTRUCTIONMATERIALRESOURCE": return new IfcConstructionMaterialResource ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCONSTRUCTIONPRODUCTRESOURCE": return new IfcConstructionProductResource ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCONTEXTDEPENDENTUNIT": return new IfcContextDependentUnit ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCONTROLLERTYPE": return new IfcControllerType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCONVERSIONBASEDUNIT": return new IfcConversionBasedUnit ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCOOLEDBEAMTYPE": return new IfcCooledBeamType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCOOLINGTOWERTYPE": return new IfcCoolingTowerType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCOORDINATEDUNIVERSALTIMEOFFSET": return new IfcCoordinatedUniversalTimeOffset ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCOSTITEM": return new IfcCostItem ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCOSTSCHEDULE": return new IfcCostSchedule ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCOSTVALUE": return new IfcCostValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCOVERING": return new IfcCovering ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCOVERINGTYPE": return new IfcCoveringType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCRANERAILASHAPEPROFILEDEF": return new IfcCraneRailAShapeProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCRANERAILFSHAPEPROFILEDEF": return new IfcCraneRailFShapeProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCREWRESOURCE": return new IfcCrewResource ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCSGSOLID": return new IfcCsgSolid ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCURRENCYRELATIONSHIP": return new IfcCurrencyRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCURTAINWALL": return new IfcCurtainWall ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCURTAINWALLTYPE": return new IfcCurtainWallType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCURVEBOUNDEDPLANE": return new IfcCurveBoundedPlane ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCURVESTYLE": return new IfcCurveStyle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCURVESTYLEFONT": return new IfcCurveStyleFont ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCURVESTYLEFONTANDSCALING": return new IfcCurveStyleFontAndScaling ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCCURVESTYLEFONTPATTERN": return new IfcCurveStyleFontPattern ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDAMPERTYPE": return new IfcDamperType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDATEANDTIME": return new IfcDateAndTime ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDEFINEDSYMBOL": return new IfcDefinedSymbol ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDERIVEDPROFILEDEF": return new IfcDerivedProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDERIVEDUNIT": return new IfcDerivedUnit ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDERIVEDUNITELEMENT": return new IfcDerivedUnitElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDIAMETERDIMENSION": return new IfcDiameterDimension ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDIMENSIONCALLOUTRELATIONSHIP": return new IfcDimensionCalloutRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDIMENSIONCURVE": return new IfcDimensionCurve ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDIMENSIONCURVEDIRECTEDCALLOUT": return new IfcDimensionCurveDirectedCallout ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDIMENSIONCURVETERMINATOR": return new IfcDimensionCurveTerminator ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDIMENSIONPAIR": return new IfcDimensionPair ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDIMENSIONALEXPONENTS": return new IfcDimensionalExponents ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDIRECTION": return new IfcDirection ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDISCRETEACCESSORY": return new IfcDiscreteAccessory ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDISCRETEACCESSORYTYPE": return new IfcDiscreteAccessoryType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDISTRIBUTIONCHAMBERELEMENT": return new IfcDistributionChamberElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDISTRIBUTIONCHAMBERELEMENTTYPE": return new IfcDistributionChamberElementType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDISTRIBUTIONCONTROLELEMENT": return new IfcDistributionControlElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDISTRIBUTIONELEMENT": return new IfcDistributionElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDISTRIBUTIONELEMENTTYPE": return new IfcDistributionElementType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDISTRIBUTIONFLOWELEMENT": return new IfcDistributionFlowElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDISTRIBUTIONPORT": return new IfcDistributionPort ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDOCUMENTELECTRONICFORMAT": return new IfcDocumentElectronicFormat ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDOCUMENTINFORMATION": return new IfcDocumentInformation ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDOCUMENTINFORMATIONRELATIONSHIP": return new IfcDocumentInformationRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDOCUMENTREFERENCE": return new IfcDocumentReference ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDOOR": return new IfcDoor ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDOORLININGPROPERTIES": return new IfcDoorLiningProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDOORPANELPROPERTIES": return new IfcDoorPanelProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDOORSTYLE": return new IfcDoorStyle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDRAUGHTINGCALLOUT": return new IfcDraughtingCallout ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDRAUGHTINGCALLOUTRELATIONSHIP": return new IfcDraughtingCalloutRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDRAUGHTINGPREDEFINEDCOLOUR": return new IfcDraughtingPreDefinedColour ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDRAUGHTINGPREDEFINEDCURVEFONT": return new IfcDraughtingPreDefinedCurveFont ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDRAUGHTINGPREDEFINEDTEXTFONT": return new IfcDraughtingPreDefinedTextFont ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDUCTFITTINGTYPE": return new IfcDuctFittingType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDUCTSEGMENTTYPE": return new IfcDuctSegmentType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCDUCTSILENCERTYPE": return new IfcDuctSilencerType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCEDGE": return new IfcEdge ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCEDGECURVE": return new IfcEdgeCurve ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCEDGELOOP": return new IfcEdgeLoop ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCELECTRICAPPLIANCETYPE": return new IfcElectricApplianceType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCELECTRICDISTRIBUTIONPOINT": return new IfcElectricDistributionPoint ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCELECTRICFLOWSTORAGEDEVICETYPE": return new IfcElectricFlowStorageDeviceType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCELECTRICGENERATORTYPE": return new IfcElectricGeneratorType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCELECTRICHEATERTYPE": return new IfcElectricHeaterType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCELECTRICMOTORTYPE": return new IfcElectricMotorType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCELECTRICTIMECONTROLTYPE": return new IfcElectricTimeControlType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCELECTRICALBASEPROPERTIES": return new IfcElectricalBaseProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCELECTRICALCIRCUIT": return new IfcElectricalCircuit ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCELECTRICALELEMENT": return new IfcElectricalElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCELEMENTASSEMBLY": return new IfcElementAssembly ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCELEMENTQUANTITY": return new IfcElementQuantity ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCELLIPSE": return new IfcEllipse ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCELLIPSEPROFILEDEF": return new IfcEllipseProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCENERGYCONVERSIONDEVICE": return new IfcEnergyConversionDevice ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCENERGYPROPERTIES": return new IfcEnergyProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCENVIRONMENTALIMPACTVALUE": return new IfcEnvironmentalImpactValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCEQUIPMENTELEMENT": return new IfcEquipmentElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCEQUIPMENTSTANDARD": return new IfcEquipmentStandard ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCEVAPORATIVECOOLERTYPE": return new IfcEvaporativeCoolerType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCEVAPORATORTYPE": return new IfcEvaporatorType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCEXTENDEDMATERIALPROPERTIES": return new IfcExtendedMaterialProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCEXTERNALLYDEFINEDHATCHSTYLE": return new IfcExternallyDefinedHatchStyle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCEXTERNALLYDEFINEDSURFACESTYLE": return new IfcExternallyDefinedSurfaceStyle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCEXTERNALLYDEFINEDSYMBOL": return new IfcExternallyDefinedSymbol ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCEXTERNALLYDEFINEDTEXTFONT": return new IfcExternallyDefinedTextFont ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCEXTRUDEDAREASOLID": return new IfcExtrudedAreaSolid ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFACE": return new IfcFace ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFACEBASEDSURFACEMODEL": return new IfcFaceBasedSurfaceModel ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFACEBOUND": return new IfcFaceBound ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFACEOUTERBOUND": return new IfcFaceOuterBound ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFACESURFACE": return new IfcFaceSurface ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFACETEDBREP": return new IfcFacetedBrep ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFACETEDBREPWITHVOIDS": return new IfcFacetedBrepWithVoids ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFAILURECONNECTIONCONDITION": return new IfcFailureConnectionCondition ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFANTYPE": return new IfcFanType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFASTENER": return new IfcFastener ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFASTENERTYPE": return new IfcFastenerType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFILLAREASTYLE": return new IfcFillAreaStyle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFILLAREASTYLEHATCHING": return new IfcFillAreaStyleHatching ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFILLAREASTYLETILESYMBOLWITHSTYLE": return new IfcFillAreaStyleTileSymbolWithStyle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFILLAREASTYLETILES": return new IfcFillAreaStyleTiles ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFILTERTYPE": return new IfcFilterType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFIRESUPPRESSIONTERMINALTYPE": return new IfcFireSuppressionTerminalType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFLOWCONTROLLER": return new IfcFlowController ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFLOWFITTING": return new IfcFlowFitting ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFLOWINSTRUMENTTYPE": return new IfcFlowInstrumentType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFLOWMETERTYPE": return new IfcFlowMeterType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFLOWMOVINGDEVICE": return new IfcFlowMovingDevice ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFLOWSEGMENT": return new IfcFlowSegment ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFLOWSTORAGEDEVICE": return new IfcFlowStorageDevice ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFLOWTERMINAL": return new IfcFlowTerminal ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFLOWTREATMENTDEVICE": return new IfcFlowTreatmentDevice ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFLUIDFLOWPROPERTIES": return new IfcFluidFlowProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFOOTING": return new IfcFooting ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFUELPROPERTIES": return new IfcFuelProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFURNISHINGELEMENT": return new IfcFurnishingElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFURNISHINGELEMENTTYPE": return new IfcFurnishingElementType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFURNITURESTANDARD": return new IfcFurnitureStandard ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCFURNITURETYPE": return new IfcFurnitureType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCGASTERMINALTYPE": return new IfcGasTerminalType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCGENERALMATERIALPROPERTIES": return new IfcGeneralMaterialProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCGENERALPROFILEPROPERTIES": return new IfcGeneralProfileProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCGEOMETRICCURVESET": return new IfcGeometricCurveSet ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCGEOMETRICREPRESENTATIONCONTEXT": return new IfcGeometricRepresentationContext ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCGEOMETRICREPRESENTATIONSUBCONTEXT": return new IfcGeometricRepresentationSubContext ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCGEOMETRICSET": return new IfcGeometricSet ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCGRID": return new IfcGrid ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCGRIDAXIS": return new IfcGridAxis ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCGRIDPLACEMENT": return new IfcGridPlacement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCGROUP": return new IfcGroup ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCHALFSPACESOLID": return new IfcHalfSpaceSolid ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCHEATEXCHANGERTYPE": return new IfcHeatExchangerType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCHUMIDIFIERTYPE": return new IfcHumidifierType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCHYGROSCOPICMATERIALPROPERTIES": return new IfcHygroscopicMaterialProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCISHAPEPROFILEDEF": return new IfcIShapeProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCIMAGETEXTURE": return new IfcImageTexture ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCINVENTORY": return new IfcInventory ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCIRREGULARTIMESERIES": return new IfcIrregularTimeSeries ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCIRREGULARTIMESERIESVALUE": return new IfcIrregularTimeSeriesValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCJUNCTIONBOXTYPE": return new IfcJunctionBoxType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCLSHAPEPROFILEDEF": return new IfcLShapeProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCLABORRESOURCE": return new IfcLaborResource ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCLAMPTYPE": return new IfcLampType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCLIBRARYINFORMATION": return new IfcLibraryInformation ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCLIBRARYREFERENCE": return new IfcLibraryReference ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCLIGHTDISTRIBUTIONDATA": return new IfcLightDistributionData ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCLIGHTFIXTURETYPE": return new IfcLightFixtureType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCLIGHTINTENSITYDISTRIBUTION": return new IfcLightIntensityDistribution ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCLIGHTSOURCEAMBIENT": return new IfcLightSourceAmbient ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCLIGHTSOURCEDIRECTIONAL": return new IfcLightSourceDirectional ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCLIGHTSOURCEGONIOMETRIC": return new IfcLightSourceGoniometric ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCLIGHTSOURCEPOSITIONAL": return new IfcLightSourcePositional ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCLIGHTSOURCESPOT": return new IfcLightSourceSpot ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCLINE": return new IfcLine ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCLINEARDIMENSION": return new IfcLinearDimension ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCLOCALPLACEMENT": return new IfcLocalPlacement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCLOCALTIME": return new IfcLocalTime ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCLOOP": return new IfcLoop ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCMAPPEDITEM": return new IfcMappedItem ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCMATERIAL": return new IfcMaterial ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCMATERIALCLASSIFICATIONRELATIONSHIP": return new IfcMaterialClassificationRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCMATERIALDEFINITIONREPRESENTATION": return new IfcMaterialDefinitionRepresentation ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCMATERIALLAYER": return new IfcMaterialLayer ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCMATERIALLAYERSET": return new IfcMaterialLayerSet ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCMATERIALLAYERSETUSAGE": return new IfcMaterialLayerSetUsage ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCMATERIALLIST": return new IfcMaterialList ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCMEASUREWITHUNIT": return new IfcMeasureWithUnit ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCMECHANICALCONCRETEMATERIALPROPERTIES": return new IfcMechanicalConcreteMaterialProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCMECHANICALFASTENER": return new IfcMechanicalFastener ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCMECHANICALFASTENERTYPE": return new IfcMechanicalFastenerType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCMECHANICALMATERIALPROPERTIES": return new IfcMechanicalMaterialProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCMECHANICALSTEELMATERIALPROPERTIES": return new IfcMechanicalSteelMaterialProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCMEMBER": return new IfcMember ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCMEMBERTYPE": return new IfcMemberType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCMETRIC": return new IfcMetric ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCMONETARYUNIT": return new IfcMonetaryUnit ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCMOTORCONNECTIONTYPE": return new IfcMotorConnectionType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCMOVE": return new IfcMove ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCOBJECTIVE": return new IfcObjective ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCOCCUPANT": return new IfcOccupant ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCOFFSETCURVE2D": return new IfcOffsetCurve2D ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCOFFSETCURVE3D": return new IfcOffsetCurve3D ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCONEDIRECTIONREPEATFACTOR": return new IfcOneDirectionRepeatFactor ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCOPENSHELL": return new IfcOpenShell ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCOPENINGELEMENT": return new IfcOpeningElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCOPTICALMATERIALPROPERTIES": return new IfcOpticalMaterialProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCORDERACTION": return new IfcOrderAction ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCORGANIZATION": return new IfcOrganization ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCORGANIZATIONRELATIONSHIP": return new IfcOrganizationRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCORIENTEDEDGE": return new IfcOrientedEdge ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCOUTLETTYPE": return new IfcOutletType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCOWNERHISTORY": return new IfcOwnerHistory ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPATH": return new IfcPath ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPERFORMANCEHISTORY": return new IfcPerformanceHistory ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPERMEABLECOVERINGPROPERTIES": return new IfcPermeableCoveringProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPERMIT": return new IfcPermit ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPERSON": return new IfcPerson ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPERSONANDORGANIZATION": return new IfcPersonAndOrganization ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPHYSICALCOMPLEXQUANTITY": return new IfcPhysicalComplexQuantity ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPILE": return new IfcPile ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPIPEFITTINGTYPE": return new IfcPipeFittingType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPIPESEGMENTTYPE": return new IfcPipeSegmentType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPIXELTEXTURE": return new IfcPixelTexture ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPLANARBOX": return new IfcPlanarBox ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPLANAREXTENT": return new IfcPlanarExtent ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPLANE": return new IfcPlane ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPLATE": return new IfcPlate ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPLATETYPE": return new IfcPlateType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPOINTONCURVE": return new IfcPointOnCurve ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPOINTONSURFACE": return new IfcPointOnSurface ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPOLYLOOP": return new IfcPolyLoop ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPOLYGONALBOUNDEDHALFSPACE": return new IfcPolygonalBoundedHalfSpace ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPOLYLINE": return new IfcPolyline ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPOSTALADDRESS": return new IfcPostalAddress ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPREDEFINEDDIMENSIONSYMBOL": return new IfcPreDefinedDimensionSymbol ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPREDEFINEDPOINTMARKERSYMBOL": return new IfcPreDefinedPointMarkerSymbol ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPREDEFINEDTERMINATORSYMBOL": return new IfcPreDefinedTerminatorSymbol ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPRESENTATIONLAYERASSIGNMENT": return new IfcPresentationLayerAssignment ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPRESENTATIONLAYERWITHSTYLE": return new IfcPresentationLayerWithStyle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPRESENTATIONSTYLEASSIGNMENT": return new IfcPresentationStyleAssignment ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPROCEDURE": return new IfcProcedure ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPRODUCTDEFINITIONSHAPE": return new IfcProductDefinitionShape ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPRODUCTREPRESENTATION": return new IfcProductRepresentation ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPRODUCTSOFCOMBUSTIONPROPERTIES": return new IfcProductsOfCombustionProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPROJECT": return new IfcProject ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPROJECTORDER": return new IfcProjectOrder ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPROJECTORDERRECORD": return new IfcProjectOrderRecord ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPROJECTIONCURVE": return new IfcProjectionCurve ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPROJECTIONELEMENT": return new IfcProjectionElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPROPERTYBOUNDEDVALUE": return new IfcPropertyBoundedValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPROPERTYCONSTRAINTRELATIONSHIP": return new IfcPropertyConstraintRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPROPERTYDEPENDENCYRELATIONSHIP": return new IfcPropertyDependencyRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPROPERTYENUMERATEDVALUE": return new IfcPropertyEnumeratedValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPROPERTYENUMERATION": return new IfcPropertyEnumeration ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPROPERTYLISTVALUE": return new IfcPropertyListValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPROPERTYREFERENCEVALUE": return new IfcPropertyReferenceValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPROPERTYSET": return new IfcPropertySet ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPROPERTYSINGLEVALUE": return new IfcPropertySingleValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPROPERTYTABLEVALUE": return new IfcPropertyTableValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPROTECTIVEDEVICETYPE": return new IfcProtectiveDeviceType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPROXY": return new IfcProxy ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCPUMPTYPE": return new IfcPumpType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCQUANTITYAREA": return new IfcQuantityArea ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCQUANTITYCOUNT": return new IfcQuantityCount ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCQUANTITYLENGTH": return new IfcQuantityLength ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCQUANTITYTIME": return new IfcQuantityTime ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCQUANTITYVOLUME": return new IfcQuantityVolume ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCQUANTITYWEIGHT": return new IfcQuantityWeight ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRADIUSDIMENSION": return new IfcRadiusDimension ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRAILING": return new IfcRailing ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRAILINGTYPE": return new IfcRailingType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRAMP": return new IfcRamp ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRAMPFLIGHT": return new IfcRampFlight ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRAMPFLIGHTTYPE": return new IfcRampFlightType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRATIONALBEZIERCURVE": return new IfcRationalBezierCurve ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRECTANGLEHOLLOWPROFILEDEF": return new IfcRectangleHollowProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRECTANGLEPROFILEDEF": return new IfcRectangleProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRECTANGULARPYRAMID": return new IfcRectangularPyramid ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRECTANGULARTRIMMEDSURFACE": return new IfcRectangularTrimmedSurface ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCREFERENCESVALUEDOCUMENT": return new IfcReferencesValueDocument ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCREGULARTIMESERIES": return new IfcRegularTimeSeries ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCREINFORCEMENTBARPROPERTIES": return new IfcReinforcementBarProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCREINFORCEMENTDEFINITIONPROPERTIES": return new IfcReinforcementDefinitionProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCREINFORCINGBAR": return new IfcReinforcingBar ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCREINFORCINGMESH": return new IfcReinforcingMesh ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELAGGREGATES": return new IfcRelAggregates ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELASSIGNSTASKS": return new IfcRelAssignsTasks ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELASSIGNSTOACTOR": return new IfcRelAssignsToActor ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELASSIGNSTOCONTROL": return new IfcRelAssignsToControl ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELASSIGNSTOGROUP": return new IfcRelAssignsToGroup ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELASSIGNSTOPROCESS": return new IfcRelAssignsToProcess ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELASSIGNSTOPRODUCT": return new IfcRelAssignsToProduct ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELASSIGNSTOPROJECTORDER": return new IfcRelAssignsToProjectOrder ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELASSIGNSTORESOURCE": return new IfcRelAssignsToResource ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELASSOCIATES": return new IfcRelAssociates ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELASSOCIATESAPPLIEDVALUE": return new IfcRelAssociatesAppliedValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELASSOCIATESAPPROVAL": return new IfcRelAssociatesApproval ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELASSOCIATESCLASSIFICATION": return new IfcRelAssociatesClassification ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELASSOCIATESCONSTRAINT": return new IfcRelAssociatesConstraint ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELASSOCIATESDOCUMENT": return new IfcRelAssociatesDocument ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELASSOCIATESLIBRARY": return new IfcRelAssociatesLibrary ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELASSOCIATESMATERIAL": return new IfcRelAssociatesMaterial ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELASSOCIATESPROFILEPROPERTIES": return new IfcRelAssociatesProfileProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELCONNECTSELEMENTS": return new IfcRelConnectsElements ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELCONNECTSPATHELEMENTS": return new IfcRelConnectsPathElements ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELCONNECTSPORTTOELEMENT": return new IfcRelConnectsPortToElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELCONNECTSPORTS": return new IfcRelConnectsPorts ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELCONNECTSSTRUCTURALACTIVITY": return new IfcRelConnectsStructuralActivity ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELCONNECTSSTRUCTURALELEMENT": return new IfcRelConnectsStructuralElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELCONNECTSSTRUCTURALMEMBER": return new IfcRelConnectsStructuralMember ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELCONNECTSWITHECCENTRICITY": return new IfcRelConnectsWithEccentricity ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELCONNECTSWITHREALIZINGELEMENTS": return new IfcRelConnectsWithRealizingElements ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELCONTAINEDINSPATIALSTRUCTURE": return new IfcRelContainedInSpatialStructure ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELCOVERSBLDGELEMENTS": return new IfcRelCoversBldgElements ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELCOVERSSPACES": return new IfcRelCoversSpaces ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELDEFINESBYPROPERTIES": return new IfcRelDefinesByProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELDEFINESBYTYPE": return new IfcRelDefinesByType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELFILLSELEMENT": return new IfcRelFillsElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELFLOWCONTROLELEMENTS": return new IfcRelFlowControlElements ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELINTERACTIONREQUIREMENTS": return new IfcRelInteractionRequirements ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELNESTS": return new IfcRelNests ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELOCCUPIESSPACES": return new IfcRelOccupiesSpaces ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELOVERRIDESPROPERTIES": return new IfcRelOverridesProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELPROJECTSELEMENT": return new IfcRelProjectsElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELREFERENCEDINSPATIALSTRUCTURE": return new IfcRelReferencedInSpatialStructure ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELSCHEDULESCOSTITEMS": return new IfcRelSchedulesCostItems ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELSEQUENCE": return new IfcRelSequence ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELSERVICESBUILDINGS": return new IfcRelServicesBuildings ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELSPACEBOUNDARY": return new IfcRelSpaceBoundary ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELVOIDSELEMENT": return new IfcRelVoidsElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRELAXATION": return new IfcRelaxation ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCREPRESENTATION": return new IfcRepresentation ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCREPRESENTATIONCONTEXT": return new IfcRepresentationContext ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCREPRESENTATIONMAP": return new IfcRepresentationMap ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCREVOLVEDAREASOLID": return new IfcRevolvedAreaSolid ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRIBPLATEPROFILEPROPERTIES": return new IfcRibPlateProfileProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRIGHTCIRCULARCONE": return new IfcRightCircularCone ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCRIGHTCIRCULARCYLINDER": return new IfcRightCircularCylinder ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCROOF": return new IfcRoof ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCROUNDEDEDGEFEATURE": return new IfcRoundedEdgeFeature ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCROUNDEDRECTANGLEPROFILEDEF": return new IfcRoundedRectangleProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSIUNIT": return new IfcSIUnit ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSANITARYTERMINALTYPE": return new IfcSanitaryTerminalType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSCHEDULETIMECONTROL": return new IfcScheduleTimeControl ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSECTIONPROPERTIES": return new IfcSectionProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSECTIONREINFORCEMENTPROPERTIES": return new IfcSectionReinforcementProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSECTIONEDSPINE": return new IfcSectionedSpine ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSENSORTYPE": return new IfcSensorType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSERVICELIFE": return new IfcServiceLife ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSERVICELIFEFACTOR": return new IfcServiceLifeFactor ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSHAPEASPECT": return new IfcShapeAspect ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSHAPEREPRESENTATION": return new IfcShapeRepresentation ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSHELLBASEDSURFACEMODEL": return new IfcShellBasedSurfaceModel ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSITE": return new IfcSite ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSLAB": return new IfcSlab ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSLABTYPE": return new IfcSlabType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSLIPPAGECONNECTIONCONDITION": return new IfcSlippageConnectionCondition ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSOUNDPROPERTIES": return new IfcSoundProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSOUNDVALUE": return new IfcSoundValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSPACE": return new IfcSpace ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSPACEHEATERTYPE": return new IfcSpaceHeaterType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSPACEPROGRAM": return new IfcSpaceProgram ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSPACETHERMALLOADPROPERTIES": return new IfcSpaceThermalLoadProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSPACETYPE": return new IfcSpaceType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSPHERE": return new IfcSphere ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTACKTERMINALTYPE": return new IfcStackTerminalType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTAIR": return new IfcStair ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTAIRFLIGHT": return new IfcStairFlight ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTAIRFLIGHTTYPE": return new IfcStairFlightType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALANALYSISMODEL": return new IfcStructuralAnalysisModel ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALCURVECONNECTION": return new IfcStructuralCurveConnection ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALCURVEMEMBER": return new IfcStructuralCurveMember ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALCURVEMEMBERVARYING": return new IfcStructuralCurveMemberVarying ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALLINEARACTION": return new IfcStructuralLinearAction ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALLINEARACTIONVARYING": return new IfcStructuralLinearActionVarying ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALLOADGROUP": return new IfcStructuralLoadGroup ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALLOADLINEARFORCE": return new IfcStructuralLoadLinearForce ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALLOADPLANARFORCE": return new IfcStructuralLoadPlanarForce ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALLOADSINGLEDISPLACEMENT": return new IfcStructuralLoadSingleDisplacement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION": return new IfcStructuralLoadSingleDisplacementDistortion ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALLOADSINGLEFORCE": return new IfcStructuralLoadSingleForce ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALLOADSINGLEFORCEWARPING": return new IfcStructuralLoadSingleForceWarping ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALLOADTEMPERATURE": return new IfcStructuralLoadTemperature ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALPLANARACTION": return new IfcStructuralPlanarAction ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALPLANARACTIONVARYING": return new IfcStructuralPlanarActionVarying ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALPOINTACTION": return new IfcStructuralPointAction ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALPOINTCONNECTION": return new IfcStructuralPointConnection ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALPOINTREACTION": return new IfcStructuralPointReaction ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALPROFILEPROPERTIES": return new IfcStructuralProfileProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALRESULTGROUP": return new IfcStructuralResultGroup ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALSTEELPROFILEPROPERTIES": return new IfcStructuralSteelProfileProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALSURFACECONNECTION": return new IfcStructuralSurfaceConnection ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALSURFACEMEMBER": return new IfcStructuralSurfaceMember ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTURALSURFACEMEMBERVARYING": return new IfcStructuralSurfaceMemberVarying ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTRUCTUREDDIMENSIONCALLOUT": return new IfcStructuredDimensionCallout ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTYLEDITEM": return new IfcStyledItem ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSTYLEDREPRESENTATION": return new IfcStyledRepresentation ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSUBCONTRACTRESOURCE": return new IfcSubContractResource ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSUBEDGE": return new IfcSubedge ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSURFACECURVESWEPTAREASOLID": return new IfcSurfaceCurveSweptAreaSolid ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSURFACEOFLINEAREXTRUSION": return new IfcSurfaceOfLinearExtrusion ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSURFACEOFREVOLUTION": return new IfcSurfaceOfRevolution ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSURFACESTYLE": return new IfcSurfaceStyle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSURFACESTYLELIGHTING": return new IfcSurfaceStyleLighting ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSURFACESTYLEREFRACTION": return new IfcSurfaceStyleRefraction ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSURFACESTYLERENDERING": return new IfcSurfaceStyleRendering ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSURFACESTYLESHADING": return new IfcSurfaceStyleShading ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSURFACESTYLEWITHTEXTURES": return new IfcSurfaceStyleWithTextures ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSWEPTDISKSOLID": return new IfcSweptDiskSolid ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSWITCHINGDEVICETYPE": return new IfcSwitchingDeviceType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSYMBOLSTYLE": return new IfcSymbolStyle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSYSTEM": return new IfcSystem ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCSYSTEMFURNITUREELEMENTTYPE": return new IfcSystemFurnitureElementType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTSHAPEPROFILEDEF": return new IfcTShapeProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTABLE": return new IfcTable ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTABLEROW": return new IfcTableRow ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTANKTYPE": return new IfcTankType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTASK": return new IfcTask ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTELECOMADDRESS": return new IfcTelecomAddress ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTENDON": return new IfcTendon ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTENDONANCHOR": return new IfcTendonAnchor ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTERMINATORSYMBOL": return new IfcTerminatorSymbol ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTEXTLITERAL": return new IfcTextLiteral ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTEXTLITERALWITHEXTENT": return new IfcTextLiteralWithExtent ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTEXTSTYLE": return new IfcTextStyle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTEXTSTYLEFONTMODEL": return new IfcTextStyleFontModel ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTEXTSTYLEFORDEFINEDFONT": return new IfcTextStyleForDefinedFont ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTEXTSTYLETEXTMODEL": return new IfcTextStyleTextModel ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTEXTSTYLEWITHBOXCHARACTERISTICS": return new IfcTextStyleWithBoxCharacteristics ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTEXTURECOORDINATEGENERATOR": return new IfcTextureCoordinateGenerator ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTEXTUREMAP": return new IfcTextureMap ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTEXTUREVERTEX": return new IfcTextureVertex ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTHERMALMATERIALPROPERTIES": return new IfcThermalMaterialProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTIMESERIESREFERENCERELATIONSHIP": return new IfcTimeSeriesReferenceRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTIMESERIESSCHEDULE": return new IfcTimeSeriesSchedule ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTIMESERIESVALUE": return new IfcTimeSeriesValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTOPOLOGYREPRESENTATION": return new IfcTopologyRepresentation ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTRANSFORMERTYPE": return new IfcTransformerType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTRANSPORTELEMENT": return new IfcTransportElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTRANSPORTELEMENTTYPE": return new IfcTransportElementType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTRAPEZIUMPROFILEDEF": return new IfcTrapeziumProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTRIMMEDCURVE": return new IfcTrimmedCurve ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTUBEBUNDLETYPE": return new IfcTubeBundleType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTWODIRECTIONREPEATFACTOR": return new IfcTwoDirectionRepeatFactor ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTYPEOBJECT": return new IfcTypeObject ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCTYPEPRODUCT": return new IfcTypeProduct ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCUSHAPEPROFILEDEF": return new IfcUShapeProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCUNITASSIGNMENT": return new IfcUnitAssignment ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCUNITARYEQUIPMENTTYPE": return new IfcUnitaryEquipmentType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCVALVETYPE": return new IfcValveType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCVECTOR": return new IfcVector ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCVERTEX": return new IfcVertex ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCVERTEXBASEDTEXTUREMAP": return new IfcVertexBasedTextureMap ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCVERTEXLOOP": return new IfcVertexLoop ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCVERTEXPOINT": return new IfcVertexPoint ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCVIBRATIONISOLATORTYPE": return new IfcVibrationIsolatorType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCVIRTUALELEMENT": return new IfcVirtualElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCVIRTUALGRIDINTERSECTION": return new IfcVirtualGridIntersection ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCWALL": return new IfcWall ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCWALLSTANDARDCASE": return new IfcWallStandardCase ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCWALLTYPE": return new IfcWallType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCWASTETERMINALTYPE": return new IfcWasteTerminalType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCWATERPROPERTIES": return new IfcWaterProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCWINDOW": return new IfcWindow ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCWINDOWLININGPROPERTIES": return new IfcWindowLiningProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCWINDOWPANELPROPERTIES": return new IfcWindowPanelProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCWINDOWSTYLE": return new IfcWindowStyle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCWORKPLAN": return new IfcWorkPlan ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCWORKSCHEDULE": return new IfcWorkSchedule ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCZSHAPEPROFILEDEF": return new IfcZShapeProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case "IFCZONE": return new IfcZone ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				default:
					return null;
			}
		}
		public IInstantiableEntity New(IModel model, int typeId, int entityLabel, bool activated)
		{
			if (model == null)
				throw new ArgumentNullException();

			switch(typeId)
			{
				case 524: return new Ifc2DCompositeCurve ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 516: return new IfcActionRequest ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 250: return new IfcActor ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 595: return new IfcActorRole ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 485: return new IfcActuatorType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 332: return new IfcAirTerminalBoxType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 271: return new IfcAirTerminalType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 588: return new IfcAirToAirHeatRecoveryType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 275: return new IfcAlarmType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 738: return new IfcAngularDimension ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 634: return new IfcAnnotation ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 57: return new IfcAnnotationCurveOccurrence ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 173: return new IfcAnnotationFillArea ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 544: return new IfcAnnotationFillAreaOccurrence ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 731: return new IfcAnnotationSurface ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 509: return new IfcAnnotationSurfaceOccurrence ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 134: return new IfcAnnotationSymbolOccurrence ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 122: return new IfcAnnotationTextOccurrence ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 627: return new IfcApplication ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 691: return new IfcAppliedValueRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 626: return new IfcApproval ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 442: return new IfcApprovalActorRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 376: return new IfcApprovalPropertyRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 552: return new IfcApprovalRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 115: return new IfcArbitraryClosedProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 219: return new IfcArbitraryOpenProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 116: return new IfcArbitraryProfileDefWithVoids ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 767: return new IfcAsset ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 672: return new IfcAsymmetricIShapeProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 280: return new IfcAxis1Placement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 411: return new IfcAxis2Placement2D ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 448: return new IfcAxis2Placement3D ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 171: return new IfcBeam ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 632: return new IfcBeamType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 166: return new IfcBezierCurve ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 723: return new IfcBlobTexture ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 702: return new IfcBlock ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 142: return new IfcBoilerType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 340: return new IfcBooleanClippingResult ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 339: return new IfcBooleanResult ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 319: return new IfcBoundaryEdgeCondition ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 674: return new IfcBoundaryFaceCondition ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 394: return new IfcBoundaryNodeCondition ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 395: return new IfcBoundaryNodeConditionWarping ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 335: return new IfcBoundedSurface ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 151: return new IfcBoundingBox ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 655: return new IfcBoxedHalfSpace ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 169: return new IfcBuilding ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 220: return new IfcBuildingElementPart ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 560: return new IfcBuildingElementProxy ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 107: return new IfcBuildingElementProxyType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 459: return new IfcBuildingStorey ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 501: return new IfcCShapeProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 689: return new IfcCableCarrierFittingType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 301: return new IfcCableCarrierSegmentType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 77: return new IfcCableSegmentType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 407: return new IfcCalendarDate ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 410: return new IfcCartesianPoint ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 145: return new IfcCartesianTransformationOperator2D ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 147: return new IfcCartesianTransformationOperator2DnonUniform ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 337: return new IfcCartesianTransformationOperator3D ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 479: return new IfcCartesianTransformationOperator3DnonUniform ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 353: return new IfcCenterLineProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 765: return new IfcChamferEdgeFeature ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 368: return new IfcChillerType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 336: return new IfcCircle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 114: return new IfcCircleHollowProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 113: return new IfcCircleProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 412: return new IfcClassification ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 14: return new IfcClassificationItem ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 210: return new IfcClassificationItemRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 13: return new IfcClassificationNotation ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 251: return new IfcClassificationNotationFacet ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 209: return new IfcClassificationReference ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 161: return new IfcClosedShell ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 622: return new IfcCoilType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 27: return new IfcColourRgb ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 383: return new IfcColumn ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 214: return new IfcColumnType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 379: return new IfcComplexProperty ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 279: return new IfcCompositeCurve ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 460: return new IfcCompositeCurveSegment ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 172: return new IfcCompositeProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 586: return new IfcCompressorType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 297: return new IfcCondenserType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 482: return new IfcCondition ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 688: return new IfcConditionCriterion ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 160: return new IfcConnectedFaceSet ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 590: return new IfcConnectionCurveGeometry ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 405: return new IfcConnectionPointEccentricity ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 71: return new IfcConnectionPointGeometry ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 713: return new IfcConnectionPortGeometry ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 69: return new IfcConnectionSurfaceGeometry ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 82: return new IfcConstraintAggregationRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 274: return new IfcConstraintClassificationRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 374: return new IfcConstraintRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 408: return new IfcConstructionEquipmentResource ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 243: return new IfcConstructionMaterialResource ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 660: return new IfcConstructionProductResource ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 304: return new IfcContextDependentUnit ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 484: return new IfcControllerType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 92: return new IfcConversionBasedUnit ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 367: return new IfcCooledBeamType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 478: return new IfcCoolingTowerType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 690: return new IfcCoordinatedUniversalTimeOffset ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 694: return new IfcCostItem ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 695: return new IfcCostSchedule ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 658: return new IfcCostValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 382: return new IfcCovering ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 565: return new IfcCoveringType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 257: return new IfcCraneRailAShapeProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 112: return new IfcCraneRailFShapeProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 659: return new IfcCrewResource ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 548: return new IfcCsgSolid ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 195: return new IfcCurrencyRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 456: return new IfcCurtainWall ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 494: return new IfcCurtainWallType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 334: return new IfcCurveBoundedPlane ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 118: return new IfcCurveStyle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 223: return new IfcCurveStyleFont ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 569: return new IfcCurveStyleFontAndScaling ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 637: return new IfcCurveStyleFontPattern ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 514: return new IfcDamperType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 373: return new IfcDateAndTime ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 461: return new IfcDefinedSymbol ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 390: return new IfcDerivedProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 630: return new IfcDerivedUnit ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 380: return new IfcDerivedUnitElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 739: return new IfcDiameterDimension ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 741: return new IfcDimensionCalloutRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 742: return new IfcDimensionCurve ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 737: return new IfcDimensionCurveDirectedCallout ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 744: return new IfcDimensionCurveTerminator ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 745: return new IfcDimensionPair ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 303: return new IfcDimensionalExponents ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 344: return new IfcDirection ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 423: return new IfcDiscreteAccessory ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 135: return new IfcDiscreteAccessoryType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 180: return new IfcDistributionChamberElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 396: return new IfcDistributionChamberElementType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 468: return new IfcDistributionControlElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 44: return new IfcDistributionElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 47: return new IfcDistributionElementType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 45: return new IfcDistributionFlowElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 178: return new IfcDistributionPort ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 599: return new IfcDocumentElectronicFormat ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 208: return new IfcDocumentInformation ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 491: return new IfcDocumentInformationRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 450: return new IfcDocumentReference ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 213: return new IfcDoor ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 493: return new IfcDoorLiningProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 602: return new IfcDoorPanelProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 492: return new IfcDoorStyle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 222: return new IfcDraughtingCallout ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 740: return new IfcDraughtingCalloutRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 607: return new IfcDraughtingPreDefinedColour ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 286: return new IfcDraughtingPreDefinedCurveFont ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 761: return new IfcDraughtingPreDefinedTextFont ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 686: return new IfcDuctFittingType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 270: return new IfcDuctSegmentType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 141: return new IfcDuctSilencerType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 202: return new IfcEdge ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 203: return new IfcEdgeCurve ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 302: return new IfcEdgeLoop ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 192: return new IfcElectricApplianceType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 242: return new IfcElectricDistributionPoint ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 372: return new IfcElectricFlowStorageDeviceType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 241: return new IfcElectricGeneratorType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 190: return new IfcElectricHeaterType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 370: return new IfcElectricMotorType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 273: return new IfcElectricTimeControlType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 177: return new IfcElectricalBaseProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 406: return new IfcElectricalCircuit ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 23: return new IfcElectricalElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 18: return new IfcElementAssembly ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 458: return new IfcElementQuantity ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 298: return new IfcEllipse ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 285: return new IfcEllipseProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 175: return new IfcEnergyConversionDevice ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 176: return new IfcEnergyProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 78: return new IfcEnvironmentalImpactValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 212: return new IfcEquipmentElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 152: return new IfcEquipmentStandard ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 621: return new IfcEvaporativeCoolerType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 513: return new IfcEvaporatorType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 585: return new IfcExtendedMaterialProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 724: return new IfcExternallyDefinedHatchStyle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 318: return new IfcExternallyDefinedSurfaceStyle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 391: return new IfcExternallyDefinedSymbol ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 132: return new IfcExternallyDefinedTextFont ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 238: return new IfcExtrudedAreaSolid ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 83: return new IfcFace ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 438: return new IfcFaceBasedSurfaceModel ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 86: return new IfcFaceBound ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 201: return new IfcFaceOuterBound ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 85: return new IfcFaceSurface ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 148: return new IfcFacetedBrep ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 369: return new IfcFacetedBrepWithVoids ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 640: return new IfcFailureConnectionCondition ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 651: return new IfcFanType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 535: return new IfcFastener ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 642: return new IfcFastenerType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 33: return new IfcFillAreaStyle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 462: return new IfcFillAreaStyleHatching ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 726: return new IfcFillAreaStyleTileSymbolWithStyle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 725: return new IfcFillAreaStyleTiles ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 139: return new IfcFilterType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 477: return new IfcFireSuppressionTerminalType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 121: return new IfcFlowController ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 467: return new IfcFlowFitting ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 196: return new IfcFlowInstrumentType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 366: return new IfcFlowMeterType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 502: return new IfcFlowMovingDevice ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 574: return new IfcFlowSegment ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 371: return new IfcFlowStorageDevice ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 46: return new IfcFlowTerminal ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 425: return new IfcFlowTreatmentDevice ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 466: return new IfcFluidFlowProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 120: return new IfcFooting ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 715: return new IfcFuelProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 253: return new IfcFurnishingElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 358: return new IfcFurnishingElementType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 75: return new IfcFurnitureStandard ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 359: return new IfcFurnitureType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 701: return new IfcGasTerminalType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 716: return new IfcGeneralMaterialProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 648: return new IfcGeneralProfileProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 237: return new IfcGeometricCurveSet ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 555: return new IfcGeometricRepresentationContext ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 556: return new IfcGeometricRepresentationSubContext ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 236: return new IfcGeometricSet ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 564: return new IfcGrid ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 441: return new IfcGridAxis ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 439: return new IfcGridPlacement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 228: return new IfcGroup ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 338: return new IfcHalfSpaceSolid ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 365: return new IfcHeatExchangerType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 64: return new IfcHumidifierType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 717: return new IfcHygroscopicMaterialProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 352: return new IfcIShapeProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 727: return new IfcImageTexture ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 768: return new IfcInventory ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 570: return new IfcIrregularTimeSeries ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 609: return new IfcIrregularTimeSeriesValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 593: return new IfcJunctionBoxType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 284: return new IfcLShapeProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 156: return new IfcLaborResource ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 592: return new IfcLampType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 449: return new IfcLibraryInformation ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 598: return new IfcLibraryReference ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 753: return new IfcLightDistributionData ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 517: return new IfcLightFixtureType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 754: return new IfcLightIntensityDistribution ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 756: return new IfcLightSourceAmbient ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 757: return new IfcLightSourceDirectional ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 758: return new IfcLightSourceGoniometric ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 759: return new IfcLightSourcePositional ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 760: return new IfcLightSourceSpot ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 272: return new IfcLine ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 746: return new IfcLinearDimension ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 481: return new IfcLocalPlacement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 483: return new IfcLocalTime ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 199: return new IfcLoop ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 333: return new IfcMappedItem ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 94: return new IfcMaterial ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 8: return new IfcMaterialClassificationRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 2: return new IfcMaterialDefinitionRepresentation ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 446: return new IfcMaterialLayer ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 205: return new IfcMaterialLayerSet ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 165: return new IfcMaterialLayerSetUsage ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 246: return new IfcMaterialList ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 7: return new IfcMeasureWithUnit ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 693: return new IfcMechanicalConcreteMaterialProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 536: return new IfcMechanicalFastener ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 643: return new IfcMechanicalFastenerType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 436: return new IfcMechanicalMaterialProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 510: return new IfcMechanicalSteelMaterialProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 310: return new IfcMember ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 601: return new IfcMemberType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 80: return new IfcMetric ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 545: return new IfcMonetaryUnit ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 155: return new IfcMotorConnectionType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 74: return new IfcMove ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 518: return new IfcObjective ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 641: return new IfcOccupant ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 687: return new IfcOffsetCurve2D ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 67: return new IfcOffsetCurve3D ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 32: return new IfcOneDirectionRepeatFactor ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 488: return new IfcOpenShell ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 498: return new IfcOpeningElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 718: return new IfcOpticalMaterialProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 591: return new IfcOrderAction ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 276: return new IfcOrganization ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 486: return new IfcOrganizationRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 596: return new IfcOrientedEdge ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 240: return new IfcOutletType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 519: return new IfcOwnerHistory ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 771: return new IfcPath ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 710: return new IfcPerformanceHistory ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 707: return new IfcPermeableCoveringProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 189: return new IfcPermit ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 198: return new IfcPerson ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 663: return new IfcPersonAndOrganization ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 604: return new IfcPhysicalComplexQuantity ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 572: return new IfcPile ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 511: return new IfcPipeFittingType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 62: return new IfcPipeSegmentType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 728: return new IfcPixelTexture ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 762: return new IfcPlanarBox ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 469: return new IfcPlanarExtent ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 388: return new IfcPlane ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 351: return new IfcPlate ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 526: return new IfcPlateType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 654: return new IfcPointOnCurve ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 65: return new IfcPointOnSurface ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 200: return new IfcPolyLoop ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 623: return new IfcPolygonalBoundedHalfSpace ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 500: return new IfcPolyline ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 662: return new IfcPostalAddress ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 747: return new IfcPreDefinedDimensionSymbol ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 748: return new IfcPreDefinedPointMarkerSymbol ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 749: return new IfcPreDefinedTerminatorSymbol ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 258: return new IfcPresentationLayerAssignment ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 259: return new IfcPresentationLayerWithStyle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 584: return new IfcPresentationStyleAssignment ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 294: return new IfcProcedure ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 90: return new IfcProductDefinitionShape ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 1: return new IfcProductRepresentation ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 719: return new IfcProductsOfCombustionProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 204: return new IfcProject ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 696: return new IfcProjectOrder ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 697: return new IfcProjectOrderRecord ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 750: return new IfcProjectionCurve ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 384: return new IfcProjectionElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 3: return new IfcPropertyBoundedValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 625: return new IfcPropertyConstraintRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 444: return new IfcPropertyDependencyRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 629: return new IfcPropertyEnumeratedValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 597: return new IfcPropertyEnumeration ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 489: return new IfcPropertyListValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 277: return new IfcPropertyReferenceValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 666: return new IfcPropertySet ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 628: return new IfcPropertySingleValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 557: return new IfcPropertyTableValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 550: return new IfcProtectiveDeviceType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 447: return new IfcProxy ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 685: return new IfcPumpType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 495: return new IfcQuantityArea ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 457: return new IfcQuantityCount ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 527: return new IfcQuantityLength ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 254: return new IfcQuantityTime ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 100: return new IfcQuantityVolume ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 603: return new IfcQuantityWeight ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 751: return new IfcRadiusDimension ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 350: return new IfcRailing ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 415: return new IfcRailingType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 414: return new IfcRamp ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 348: return new IfcRampFlight ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 283: return new IfcRampFlightType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 546: return new IfcRationalBezierCurve ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 562: return new IfcRectangleHollowProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 103: return new IfcRectangleProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 705: return new IfcRectangularPyramid ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 653: return new IfcRectangularTrimmedSurface ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 551: return new IfcReferencesValueDocument ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 417: return new IfcRegularTimeSeries ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 684: return new IfcReinforcementBarProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 263: return new IfcReinforcementDefinitionProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 571: return new IfcReinforcingBar ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 531: return new IfcReinforcingMesh ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 631: return new IfcRelAggregates ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 618: return new IfcRelAssignsTasks ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 323: return new IfcRelAssignsToActor ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 558: return new IfcRelAssignsToControl ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 278: return new IfcRelAssignsToGroup ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 249: return new IfcRelAssignsToProcess ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 309: return new IfcRelAssignsToProduct ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 698: return new IfcRelAssignsToProjectOrder ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 9: return new IfcRelAssignsToResource ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 308: return new IfcRelAssociates ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 699: return new IfcRelAssociatesAppliedValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 342: return new IfcRelAssociatesApproval ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 343: return new IfcRelAssociatesClassification ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 711: return new IfcRelAssociatesConstraint ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 307: return new IfcRelAssociatesDocument ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 522: return new IfcRelAssociatesLibrary ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 497: return new IfcRelAssociatesMaterial ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 676: return new IfcRelAssociatesProfileProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 312: return new IfcRelConnectsElements ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 668: return new IfcRelConnectsPathElements ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 633: return new IfcRelConnectsPortToElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 215: return new IfcRelConnectsPorts ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 211: return new IfcRelConnectsStructuralActivity ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 413: return new IfcRelConnectsStructuralElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 321: return new IfcRelConnectsStructuralMember ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 322: return new IfcRelConnectsWithEccentricity ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 313: return new IfcRelConnectsWithRealizingElements ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 559: return new IfcRelContainedInSpatialStructure ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 24: return new IfcRelCoversBldgElements ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 17: return new IfcRelCoversSpaces ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 247: return new IfcRelDefinesByProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 206: return new IfcRelDefinesByType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 563: return new IfcRelFillsElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 360: return new IfcRelFlowControlElements ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 708: return new IfcRelInteractionRequirements ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 305: return new IfcRelNests ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 324: return new IfcRelOccupiesSpaces ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 248: return new IfcRelOverridesProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 311: return new IfcRelProjectsElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 455: return new IfcRelReferencedInSpatialStructure ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 700: return new IfcRelSchedulesCostItems ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 490: return new IfcRelSequence ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 600: return new IfcRelServicesBuildings ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 15: return new IfcRelSpaceBoundary ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 496: return new IfcRelVoidsElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 364: return new IfcRelaxation ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 87: return new IfcRepresentation ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 378: return new IfcRepresentationContext ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 95: return new IfcRepresentationMap ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 515: return new IfcRevolvedAreaSolid ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 763: return new IfcRibPlateProfileProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 703: return new IfcRightCircularCone ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 704: return new IfcRightCircularCylinder ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 347: return new IfcRoof ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 766: return new IfcRoundedEdgeFeature ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 106: return new IfcRoundedRectangleProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 164: return new IfcSIUnit ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 435: return new IfcSanitaryTerminalType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 402: return new IfcScheduleTimeControl ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 184: return new IfcSectionProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 508: return new IfcSectionReinforcementProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 300: return new IfcSectionedSpine ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 375: return new IfcSensorType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 769: return new IfcServiceLife ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 770: return new IfcServiceLifeFactor ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 665: return new IfcShapeAspect ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 664: return new IfcShapeRepresentation ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 235: return new IfcShellBasedSurfaceModel ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 349: return new IfcSite ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 99: return new IfcSlab ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 381: return new IfcSlabType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 638: return new IfcSlippageConnectionCondition ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 474: return new IfcSoundProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 266: return new IfcSoundValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 454: return new IfcSpace ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 59: return new IfcSpaceHeaterType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 709: return new IfcSpaceProgram ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 610: return new IfcSpaceThermalLoadProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 529: return new IfcSpaceType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 706: return new IfcSphere ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 476: return new IfcStackTerminalType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 346: return new IfcStair ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 25: return new IfcStairFlight ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 525: return new IfcStairFlightType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 230: return new IfcStructuralAnalysisModel ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 534: return new IfcStructuralCurveConnection ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 224: return new IfcStructuralCurveMember ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 227: return new IfcStructuralCurveMemberVarying ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 463: return new IfcStructuralLinearAction ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 464: return new IfcStructuralLinearActionVarying ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 573: return new IfcStructuralLoadGroup ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 419: return new IfcStructuralLoadLinearForce ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 174: return new IfcStructuralLoadPlanarForce ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 289: return new IfcStructuralLoadSingleDisplacement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 290: return new IfcStructuralLoadSingleDisplacementDistortion ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 119: return new IfcStructuralLoadSingleForce ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 393: return new IfcStructuralLoadSingleForceWarping ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 36: return new IfcStructuralLoadTemperature ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 39: return new IfcStructuralPlanarAction ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 357: return new IfcStructuralPlanarActionVarying ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 356: return new IfcStructuralPointAction ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 533: return new IfcStructuralPointConnection ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 354: return new IfcStructuralPointReaction ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 683: return new IfcStructuralProfileProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 532: return new IfcStructuralResultGroup ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 692: return new IfcStructuralSteelProfileProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 264: return new IfcStructuralSurfaceConnection ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 420: return new IfcStructuralSurfaceMember ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 421: return new IfcStructuralSurfaceMemberVarying ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 752: return new IfcStructuredDimensionCallout ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 56: return new IfcStyledItem ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 162: return new IfcStyledRepresentation ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 594: return new IfcSubContractResource ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 487: return new IfcSubedge ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 480: return new IfcSurfaceCurveSweptAreaSolid ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 256: return new IfcSurfaceOfLinearExtrusion ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 109: return new IfcSurfaceOfRevolution ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 260: return new IfcSurfaceStyle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 117: return new IfcSurfaceStyleLighting ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 636: return new IfcSurfaceStyleRefraction ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 317: return new IfcSurfaceStyleRendering ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 316: return new IfcSurfaceStyleShading ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 392: return new IfcSurfaceStyleWithTextures ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 547: return new IfcSweptDiskSolid ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 153: return new IfcSwitchingDeviceType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 729: return new IfcSymbolStyle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 229: return new IfcSystem ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 422: return new IfcSystemFurnitureElementType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 671: return new IfcTShapeProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 377: return new IfcTable ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 661: return new IfcTableRow ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 619: return new IfcTankType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 72: return new IfcTask ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 553: return new IfcTelecomAddress ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 261: return new IfcTendon ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 675: return new IfcTendonAnchor ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 743: return new IfcTerminatorSymbol ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 29: return new IfcTextLiteral ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 426: return new IfcTextLiteralWithExtent ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 427: return new IfcTextStyle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 503: return new IfcTextStyleFontModel ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 611: return new IfcTextStyleForDefinedFont ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 581: return new IfcTextStyleTextModel ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 730: return new IfcTextStyleWithBoxCharacteristics ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 733: return new IfcTextureCoordinateGenerator ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 734: return new IfcTextureMap ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 735: return new IfcTextureVertex ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 720: return new IfcThermalMaterialProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 673: return new IfcTimeSeriesReferenceRelationship ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 712: return new IfcTimeSeriesSchedule ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 35: return new IfcTimeSeriesValue ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 88: return new IfcTopologyRepresentation ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 549: return new IfcTransformerType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 416: return new IfcTransportElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 475: return new IfcTransportElementType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 561: return new IfcTrapeziumProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 143: return new IfcTrimmedCurve ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 138: return new IfcTubeBundleType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 315: return new IfcTwoDirectionRepeatFactor ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 42: return new IfcTypeObject ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 43: return new IfcTypeProduct ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 670: return new IfcUShapeProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 245: return new IfcUnitAssignment ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 234: return new IfcUnitaryEquipmentType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 465: return new IfcValveType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 652: return new IfcVector ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 520: return new IfcVertex ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 736: return new IfcVertexBasedTextureMap ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 244: return new IfcVertexLoop ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 521: return new IfcVertexPoint ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 137: return new IfcVibrationIsolatorType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 168: return new IfcVirtualElement ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 589: return new IfcVirtualGridIntersection ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 452: return new IfcWall ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 453: return new IfcWallStandardCase ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 282: return new IfcWallType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 295: return new IfcWasteTerminalType ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 721: return new IfcWaterProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 667: return new IfcWindow ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 252: return new IfcWindowLiningProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 96: return new IfcWindowPanelProperties ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 345: return new IfcWindowStyle ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 187: return new IfcWorkPlan ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 186: return new IfcWorkSchedule ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 528: return new IfcZShapeProfileDef ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				case 669: return new IfcZone ( model ) { ActivationStatus = activated ? ActivationStatus.ActivatedRead : ActivationStatus.NotActivated, EntityLabel = entityLabel };
				default:
					return null;
			}
		}

		public IExpressValueType New(string typeName)
		{
		if (typeName == null)
				throw new ArgumentNullException();

			var name = typeName.ToUpper();
			switch(name)
			{
				case "IFCABSORBEDDOSEMEASURE": return new IfcAbsorbedDoseMeasure ();
				case "IFCACCELERATIONMEASURE": return new IfcAccelerationMeasure ();
				case "IFCAMOUNTOFSUBSTANCEMEASURE": return new IfcAmountOfSubstanceMeasure ();
				case "IFCANGULARVELOCITYMEASURE": return new IfcAngularVelocityMeasure ();
				case "IFCAREAMEASURE": return new IfcAreaMeasure ();
				case "IFCBOOLEAN": return new IfcBoolean ();
				case "IFCBOXALIGNMENT": return new IfcBoxAlignment ();
				case "IFCCOMPLEXNUMBER": return new IfcComplexNumber ();
				case "IFCCOMPOUNDPLANEANGLEMEASURE": return new IfcCompoundPlaneAngleMeasure ();
				case "IFCCONTEXTDEPENDENTMEASURE": return new IfcContextDependentMeasure ();
				case "IFCCOUNTMEASURE": return new IfcCountMeasure ();
				case "IFCCURVATUREMEASURE": return new IfcCurvatureMeasure ();
				case "IFCDAYINMONTHNUMBER": return new IfcDayInMonthNumber ();
				case "IFCDAYLIGHTSAVINGHOUR": return new IfcDaylightSavingHour ();
				case "IFCDESCRIPTIVEMEASURE": return new IfcDescriptiveMeasure ();
				case "IFCDIMENSIONCOUNT": return new IfcDimensionCount ();
				case "IFCDOSEEQUIVALENTMEASURE": return new IfcDoseEquivalentMeasure ();
				case "IFCDYNAMICVISCOSITYMEASURE": return new IfcDynamicViscosityMeasure ();
				case "IFCELECTRICCAPACITANCEMEASURE": return new IfcElectricCapacitanceMeasure ();
				case "IFCELECTRICCHARGEMEASURE": return new IfcElectricChargeMeasure ();
				case "IFCELECTRICCONDUCTANCEMEASURE": return new IfcElectricConductanceMeasure ();
				case "IFCELECTRICCURRENTMEASURE": return new IfcElectricCurrentMeasure ();
				case "IFCELECTRICRESISTANCEMEASURE": return new IfcElectricResistanceMeasure ();
				case "IFCELECTRICVOLTAGEMEASURE": return new IfcElectricVoltageMeasure ();
				case "IFCENERGYMEASURE": return new IfcEnergyMeasure ();
				case "IFCFONTSTYLE": return new IfcFontStyle ();
				case "IFCFONTVARIANT": return new IfcFontVariant ();
				case "IFCFONTWEIGHT": return new IfcFontWeight ();
				case "IFCFORCEMEASURE": return new IfcForceMeasure ();
				case "IFCFREQUENCYMEASURE": return new IfcFrequencyMeasure ();
				case "IFCGLOBALLYUNIQUEID": return new IfcGloballyUniqueId ();
				case "IFCHEATFLUXDENSITYMEASURE": return new IfcHeatFluxDensityMeasure ();
				case "IFCHEATINGVALUEMEASURE": return new IfcHeatingValueMeasure ();
				case "IFCHOURINDAY": return new IfcHourInDay ();
				case "IFCIDENTIFIER": return new IfcIdentifier ();
				case "IFCILLUMINANCEMEASURE": return new IfcIlluminanceMeasure ();
				case "IFCINDUCTANCEMEASURE": return new IfcInductanceMeasure ();
				case "IFCINTEGER": return new IfcInteger ();
				case "IFCINTEGERCOUNTRATEMEASURE": return new IfcIntegerCountRateMeasure ();
				case "IFCIONCONCENTRATIONMEASURE": return new IfcIonConcentrationMeasure ();
				case "IFCISOTHERMALMOISTURECAPACITYMEASURE": return new IfcIsothermalMoistureCapacityMeasure ();
				case "IFCKINEMATICVISCOSITYMEASURE": return new IfcKinematicViscosityMeasure ();
				case "IFCLABEL": return new IfcLabel ();
				case "IFCLENGTHMEASURE": return new IfcLengthMeasure ();
				case "IFCLINEARFORCEMEASURE": return new IfcLinearForceMeasure ();
				case "IFCLINEARMOMENTMEASURE": return new IfcLinearMomentMeasure ();
				case "IFCLINEARSTIFFNESSMEASURE": return new IfcLinearStiffnessMeasure ();
				case "IFCLINEARVELOCITYMEASURE": return new IfcLinearVelocityMeasure ();
				case "IFCLOGICAL": return new IfcLogical ();
				case "IFCLUMINOUSFLUXMEASURE": return new IfcLuminousFluxMeasure ();
				case "IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE": return new IfcLuminousIntensityDistributionMeasure ();
				case "IFCLUMINOUSINTENSITYMEASURE": return new IfcLuminousIntensityMeasure ();
				case "IFCMAGNETICFLUXDENSITYMEASURE": return new IfcMagneticFluxDensityMeasure ();
				case "IFCMAGNETICFLUXMEASURE": return new IfcMagneticFluxMeasure ();
				case "IFCMASSDENSITYMEASURE": return new IfcMassDensityMeasure ();
				case "IFCMASSFLOWRATEMEASURE": return new IfcMassFlowRateMeasure ();
				case "IFCMASSMEASURE": return new IfcMassMeasure ();
				case "IFCMASSPERLENGTHMEASURE": return new IfcMassPerLengthMeasure ();
				case "IFCMINUTEINHOUR": return new IfcMinuteInHour ();
				case "IFCMODULUSOFELASTICITYMEASURE": return new IfcModulusOfElasticityMeasure ();
				case "IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE": return new IfcModulusOfLinearSubgradeReactionMeasure ();
				case "IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE": return new IfcModulusOfRotationalSubgradeReactionMeasure ();
				case "IFCMODULUSOFSUBGRADEREACTIONMEASURE": return new IfcModulusOfSubgradeReactionMeasure ();
				case "IFCMOISTUREDIFFUSIVITYMEASURE": return new IfcMoistureDiffusivityMeasure ();
				case "IFCMOLECULARWEIGHTMEASURE": return new IfcMolecularWeightMeasure ();
				case "IFCMOMENTOFINERTIAMEASURE": return new IfcMomentOfInertiaMeasure ();
				case "IFCMONETARYMEASURE": return new IfcMonetaryMeasure ();
				case "IFCMONTHINYEARNUMBER": return new IfcMonthInYearNumber ();
				case "IFCNORMALISEDRATIOMEASURE": return new IfcNormalisedRatioMeasure ();
				case "IFCNUMERICMEASURE": return new IfcNumericMeasure ();
				case "IFCPHMEASURE": return new IfcPHMeasure ();
				case "IFCPARAMETERVALUE": return new IfcParameterValue ();
				case "IFCPLANARFORCEMEASURE": return new IfcPlanarForceMeasure ();
				case "IFCPLANEANGLEMEASURE": return new IfcPlaneAngleMeasure ();
				case "IFCPOSITIVELENGTHMEASURE": return new IfcPositiveLengthMeasure ();
				case "IFCPOSITIVEPLANEANGLEMEASURE": return new IfcPositivePlaneAngleMeasure ();
				case "IFCPOSITIVERATIOMEASURE": return new IfcPositiveRatioMeasure ();
				case "IFCPOWERMEASURE": return new IfcPowerMeasure ();
				case "IFCPRESENTABLETEXT": return new IfcPresentableText ();
				case "IFCPRESSUREMEASURE": return new IfcPressureMeasure ();
				case "IFCRADIOACTIVITYMEASURE": return new IfcRadioActivityMeasure ();
				case "IFCRATIOMEASURE": return new IfcRatioMeasure ();
				case "IFCREAL": return new IfcReal ();
				case "IFCROTATIONALFREQUENCYMEASURE": return new IfcRotationalFrequencyMeasure ();
				case "IFCROTATIONALMASSMEASURE": return new IfcRotationalMassMeasure ();
				case "IFCROTATIONALSTIFFNESSMEASURE": return new IfcRotationalStiffnessMeasure ();
				case "IFCSECONDINMINUTE": return new IfcSecondInMinute ();
				case "IFCSECTIONMODULUSMEASURE": return new IfcSectionModulusMeasure ();
				case "IFCSECTIONALAREAINTEGRALMEASURE": return new IfcSectionalAreaIntegralMeasure ();
				case "IFCSHEARMODULUSMEASURE": return new IfcShearModulusMeasure ();
				case "IFCSOLIDANGLEMEASURE": return new IfcSolidAngleMeasure ();
				case "IFCSOUNDPOWERMEASURE": return new IfcSoundPowerMeasure ();
				case "IFCSOUNDPRESSUREMEASURE": return new IfcSoundPressureMeasure ();
				case "IFCSPECIFICHEATCAPACITYMEASURE": return new IfcSpecificHeatCapacityMeasure ();
				case "IFCSPECULAREXPONENT": return new IfcSpecularExponent ();
				case "IFCSPECULARROUGHNESS": return new IfcSpecularRoughness ();
				case "IFCTEMPERATUREGRADIENTMEASURE": return new IfcTemperatureGradientMeasure ();
				case "IFCTEXT": return new IfcText ();
				case "IFCTEXTALIGNMENT": return new IfcTextAlignment ();
				case "IFCTEXTDECORATION": return new IfcTextDecoration ();
				case "IFCTEXTFONTNAME": return new IfcTextFontName ();
				case "IFCTEXTTRANSFORMATION": return new IfcTextTransformation ();
				case "IFCTHERMALADMITTANCEMEASURE": return new IfcThermalAdmittanceMeasure ();
				case "IFCTHERMALCONDUCTIVITYMEASURE": return new IfcThermalConductivityMeasure ();
				case "IFCTHERMALEXPANSIONCOEFFICIENTMEASURE": return new IfcThermalExpansionCoefficientMeasure ();
				case "IFCTHERMALRESISTANCEMEASURE": return new IfcThermalResistanceMeasure ();
				case "IFCTHERMALTRANSMITTANCEMEASURE": return new IfcThermalTransmittanceMeasure ();
				case "IFCTHERMODYNAMICTEMPERATUREMEASURE": return new IfcThermodynamicTemperatureMeasure ();
				case "IFCTIMEMEASURE": return new IfcTimeMeasure ();
				case "IFCTIMESTAMP": return new IfcTimeStamp ();
				case "IFCTORQUEMEASURE": return new IfcTorqueMeasure ();
				case "IFCVAPORPERMEABILITYMEASURE": return new IfcVaporPermeabilityMeasure ();
				case "IFCVOLUMEMEASURE": return new IfcVolumeMeasure ();
				case "IFCVOLUMETRICFLOWRATEMEASURE": return new IfcVolumetricFlowRateMeasure ();
				case "IFCWARPINGCONSTANTMEASURE": return new IfcWarpingConstantMeasure ();
				case "IFCWARPINGMOMENTMEASURE": return new IfcWarpingMomentMeasure ();
				case "IFCYEARNUMBER": return new IfcYearNumber ();
				case "IFCNULLSTYLE": return new IfcNullStyle ();
				default:
					return null;
			}
		}

		private static readonly List<string> _schemasIds = new List<string> { "IFC2X3" };
		public IEnumerable<string> SchemasIds { get { return _schemasIds; } }

	}
}
