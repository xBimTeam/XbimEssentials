// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.Kernel;
using Xbim.Ifc2x3.MeasureResource;
using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc2x3.Interfaces;
using Xbim.Ifc2x3.SharedBldgServiceElements;
//## Custom using statements
//##

namespace Xbim.Ifc2x3.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcSoundProperties
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcSoundProperties : IIfcPropertySetDefinition
	{
		IfcBoolean @IsAttenuating { get; }
		IfcSoundScaleEnum? @SoundScale { get; }
		IEnumerable<IIfcSoundValue> @SoundValues { get; }
	
	}
}

namespace Xbim.Ifc2x3.SharedBldgServiceElements
{
	[ExpressType("IfcSoundProperties", 474)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcSoundProperties : IfcPropertySetDefinition, IInstantiableEntity, IIfcSoundProperties, IEqualityComparer<@IfcSoundProperties>, IEquatable<@IfcSoundProperties>
	{
		#region IIfcSoundProperties explicit implementation
		IfcBoolean IIfcSoundProperties.IsAttenuating { get { return @IsAttenuating; } }	
		IfcSoundScaleEnum? IIfcSoundProperties.SoundScale { get { return @SoundScale; } }	
		IEnumerable<IIfcSoundValue> IIfcSoundProperties.SoundValues { get { return @SoundValues; } }	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcSoundProperties(IModel model) : base(model) 		{ 
			Model = model; 
			_soundValues = new ItemSet<IfcSoundValue>( this, 8 );
		}

		#region Explicit attribute fields
		private IfcBoolean _isAttenuating;
		private IfcSoundScaleEnum? _soundScale;
		private ItemSet<IfcSoundValue> _soundValues;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(5, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 8)]
		public IfcBoolean @IsAttenuating 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _isAttenuating;
				((IPersistEntity)this).Activate(false);
				return _isAttenuating;
			} 
			set
			{
				SetValue( v =>  _isAttenuating = v, _isAttenuating, value,  "IsAttenuating");
			} 
		}	
		[EntityAttribute(6, EntityAttributeState.Optional, EntityAttributeType.Enum, EntityAttributeType.None, -1, -1, 9)]
		public IfcSoundScaleEnum? @SoundScale 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _soundScale;
				((IPersistEntity)this).Activate(false);
				return _soundScale;
			} 
			set
			{
				SetValue( v =>  _soundScale = v, _soundScale, value,  "SoundScale");
			} 
		}	
		[EntityAttribute(7, EntityAttributeState.Mandatory, EntityAttributeType.List, EntityAttributeType.Class, 1, 8, 10)]
		public ItemSet<IfcSoundValue> @SoundValues 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _soundValues;
				((IPersistEntity)this).Activate(false);
				return _soundValues;
			} 
		}	
		#endregion





		#region IPersist implementation
		public  override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 4: 
					_isAttenuating = value.BooleanVal;
					return;
				case 5: 
                    _soundScale = (IfcSoundScaleEnum) System.Enum.Parse(typeof (IfcSoundScaleEnum), value.EnumVal, true);
					return;
				case 6: 
					if (_soundValues == null) _soundValues = new ItemSet<IfcSoundValue>( this );
					_soundValues.InternalAdd((IfcSoundValue)value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		
		public  override string WhereRule() 
		{
			return "";
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcSoundProperties other)
	    {
	        return this == other;
	    }

	    public override bool Equals(object obj)
        {
            // Check for null
            if (obj == null) return false;

            // Check for type
            if (GetType() != obj.GetType()) return false;

            // Cast as @IfcSoundProperties
            var root = (@IfcSoundProperties)obj;
            return this == root;
        }
        public override int GetHashCode()
        {
            //good enough as most entities will be in collections of  only one model, equals distinguishes for model
            return EntityLabel.GetHashCode(); 
        }

        public static bool operator ==(@IfcSoundProperties left, @IfcSoundProperties right)
        {
            // If both are null, or both are same instance, return true.
            if (ReferenceEquals(left, right))
                return true;

            // If one is null, but not both, return false.
            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
                return false;

            return (left.EntityLabel == right.EntityLabel) && (left.Model == right.Model);

        }

        public static bool operator !=(@IfcSoundProperties left, @IfcSoundProperties right)
        {
            return !(left == right);
        }


        public bool Equals(@IfcSoundProperties x, @IfcSoundProperties y)
        {
            return x == y;
        }

        public int GetHashCode(@IfcSoundProperties obj)
        {
            return obj == null ? -1 : obj.GetHashCode();
        }
        #endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}