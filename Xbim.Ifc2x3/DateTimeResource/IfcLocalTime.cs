// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.PropertyResource;
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using Xbim.Common.Metadata;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc2x3.Interfaces;
using Xbim.Ifc2x3.DateTimeResource;
//## Custom using statements
//##

namespace Xbim.Ifc2x3.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcLocalTime
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcLocalTime : IPersistEntity, IfcDateTimeSelect, IfcObjectReferenceSelect
	{
		IfcHourInDay @HourComponent { get;  set; }
		IfcMinuteInHour? @MinuteComponent { get;  set; }
		IfcSecondInMinute? @SecondComponent { get;  set; }
		IIfcCoordinatedUniversalTimeOffset @Zone { get;  set; }
		IfcDaylightSavingHour? @DaylightSavingOffset { get;  set; }
	
	}
}

namespace Xbim.Ifc2x3.DateTimeResource
{
	[ExpressType("IfcLocalTime", 483)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcLocalTime : INotifyPropertyChanged, IInstantiableEntity, IIfcLocalTime, IContainsEntityReferences, IEquatable<@IfcLocalTime>
	{
		#region IIfcLocalTime explicit implementation
		IfcHourInDay IIfcLocalTime.HourComponent { 
			get { return @HourComponent; } 
 
			set { HourComponent = value;}
		}	
		IfcMinuteInHour? IIfcLocalTime.MinuteComponent { 
			get { return @MinuteComponent; } 
 
			set { MinuteComponent = value;}
		}	
		IfcSecondInMinute? IIfcLocalTime.SecondComponent { 
			get { return @SecondComponent; } 
 
			set { SecondComponent = value;}
		}	
		IIfcCoordinatedUniversalTimeOffset IIfcLocalTime.Zone { 
			get { return @Zone; } 
 
 
			set { Zone = value as IfcCoordinatedUniversalTimeOffset;}
		}	
		IfcDaylightSavingHour? IIfcLocalTime.DaylightSavingOffset { 
			get { return @DaylightSavingOffset; } 
 
			set { DaylightSavingOffset = value;}
		}	
		 
		#endregion

		#region Implementation of IPersistEntity

		public int EntityLabel {get; internal set;}
		
		public IModel Model { get; internal set; }

		/// <summary>
        /// This property is deprecated and likely to be removed. Use just 'Model' instead.
        /// </summary>
		[Obsolete("This property is deprecated and likely to be removed. Use just 'Model' instead.")]
        public IModel ModelOf { get { return Model; } }
		
	    internal ActivationStatus ActivationStatus = ActivationStatus.NotActivated;

	    ActivationStatus IPersistEntity.ActivationStatus { get { return ActivationStatus; } }
		
		void IPersistEntity.Activate(bool write)
		{
			switch (ActivationStatus)
		    {
		        case ActivationStatus.ActivatedReadWrite:
		            return;
		        case ActivationStatus.NotActivated:
		            lock (this)
		            {
                        //check again in the lock
		                if (ActivationStatus == ActivationStatus.NotActivated)
		                {
		                    if (Model.Activate(this, write))
		                    {
		                        ActivationStatus = write
		                            ? ActivationStatus.ActivatedReadWrite
		                            : ActivationStatus.ActivatedRead;
		                    }
		                }
		            }
		            break;
		        case ActivationStatus.ActivatedRead:
		            if (!write) return;
		            if (Model.Activate(this, true))
                        ActivationStatus = ActivationStatus.ActivatedReadWrite;
		            break;
		        default:
		            throw new ArgumentOutOfRangeException();
		    }
		}

		void IPersistEntity.Activate (Action activation)
		{
			if (ActivationStatus != ActivationStatus.NotActivated) return; //activation can only happen once in a lifetime of the object
			
			activation();
			ActivationStatus = ActivationStatus.ActivatedRead;
		}

		ExpressType IPersistEntity.ExpressType { get { return Model.Metadata.ExpressType(this);  } }
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcLocalTime(IModel model) 		{ 
			Model = model; 
		}

		#region Explicit attribute fields
		private IfcHourInDay _hourComponent;
		private IfcMinuteInHour? _minuteComponent;
		private IfcSecondInMinute? _secondComponent;
		private IfcCoordinatedUniversalTimeOffset _zone;
		private IfcDaylightSavingHour? _daylightSavingOffset;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 1)]
		public IfcHourInDay @HourComponent 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _hourComponent;
				((IPersistEntity)this).Activate(false);
				return _hourComponent;
			} 
			set
			{
				SetValue( v =>  _hourComponent = v, _hourComponent, value,  "HourComponent", 1);
			} 
		}	
		[EntityAttribute(2, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 2)]
		public IfcMinuteInHour? @MinuteComponent 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _minuteComponent;
				((IPersistEntity)this).Activate(false);
				return _minuteComponent;
			} 
			set
			{
				SetValue( v =>  _minuteComponent = v, _minuteComponent, value,  "MinuteComponent", 2);
			} 
		}	
		[EntityAttribute(3, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 3)]
		public IfcSecondInMinute? @SecondComponent 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _secondComponent;
				((IPersistEntity)this).Activate(false);
				return _secondComponent;
			} 
			set
			{
				SetValue( v =>  _secondComponent = v, _secondComponent, value,  "SecondComponent", 3);
			} 
		}	
		[EntityAttribute(4, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 4)]
		public IfcCoordinatedUniversalTimeOffset @Zone 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _zone;
				((IPersistEntity)this).Activate(false);
				return _zone;
			} 
			set
			{
				SetValue( v =>  _zone = v, _zone, value,  "Zone", 4);
			} 
		}	
		[EntityAttribute(5, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 5)]
		public IfcDaylightSavingHour? @DaylightSavingOffset 
		{ 
			get 
			{
				if(ActivationStatus != ActivationStatus.NotActivated) return _daylightSavingOffset;
				((IPersistEntity)this).Activate(false);
				return _daylightSavingOffset;
			} 
			set
			{
				SetValue( v =>  _daylightSavingOffset = v, _daylightSavingOffset, value,  "DaylightSavingOffset", 5);
			} 
		}	
		#endregion




		#region INotifyPropertyChanged implementation
		 
		public event PropertyChangedEventHandler PropertyChanged;

		protected void NotifyPropertyChanged( string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

		#endregion

		#region Transactional property setting

		protected void SetValue<TProperty>(Action<TProperty> setter, TProperty oldValue, TProperty newValue, string notifyPropertyName, byte propertyOrder)
		{
			//activate for write if it is not activated yet
			if (ActivationStatus != ActivationStatus.ActivatedReadWrite)
				((IPersistEntity)this).Activate(true);

			//just set the value if the model is marked as non-transactional
			if (!Model.IsTransactional)
			{
				setter(newValue);
				NotifyPropertyChanged(notifyPropertyName);
				return;
			}

			//check there is a transaction
			var txn = Model.CurrentTransaction;
			if (txn == null) throw new Exception("Operation out of transaction.");

			Action doAction = () => {
				setter(newValue);
				NotifyPropertyChanged(notifyPropertyName);
			};
			Action undoAction = () => {
				setter(oldValue);
				NotifyPropertyChanged(notifyPropertyName);
			};
			doAction();

			//do action and THAN add to transaction so that it gets the object in new state
			txn.AddReversibleAction(doAction, undoAction, this, ChangeType.Modified, propertyOrder);
		}

		#endregion

		#region IPersist implementation
		public virtual void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					_hourComponent = value.IntegerVal;
					return;
				case 1: 
					_minuteComponent = value.IntegerVal;
					return;
				case 2: 
					_secondComponent = value.RealVal;
					return;
				case 3: 
					_zone = (IfcCoordinatedUniversalTimeOffset)(value.EntityVal);
					return;
				case 4: 
					_daylightSavingOffset = value.IntegerVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcLocalTime other)
	    {
	        return this == other;
	    }

	    public override bool Equals(object obj)
        {
            // Check for null
            if (obj == null) return false;

            // Check for type
            if (GetType() != obj.GetType()) return false;

            // Cast as @IfcLocalTime
            var root = (@IfcLocalTime)obj;
            return this == root;
        }
        public override int GetHashCode()
        {
            //good enough as most entities will be in collections of  only one model, equals distinguishes for model
            return EntityLabel.GetHashCode(); 
        }

        public static bool operator ==(@IfcLocalTime left, @IfcLocalTime right)
        {
            // If both are null, or both are same instance, return true.
            if (ReferenceEquals(left, right))
                return true;

            // If one is null, but not both, return false.
            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
                return false;

            return (left.EntityLabel == right.EntityLabel) && (left.Model == right.Model);

        }

        public static bool operator !=(@IfcLocalTime left, @IfcLocalTime right)
        {
            return !(left == right);
        }

        public static bool operator ==(@IfcLocalTime left, IfcDateTimeSelect right)
		{
			return left == right as @IfcLocalTime;
		}

		public static bool operator !=(@IfcLocalTime left, IfcDateTimeSelect right)
		{
			return !(left == right);
		}

        public static bool operator ==(@IfcLocalTime left, IfcObjectReferenceSelect right)
		{
			return left == right as @IfcLocalTime;
		}

		public static bool operator !=(@IfcLocalTime left, IfcObjectReferenceSelect right)
		{
			return !(left == right);
		}

        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				if (@Zone != null)
					yield return @Zone;
			}
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}