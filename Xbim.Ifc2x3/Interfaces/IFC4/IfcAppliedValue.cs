// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc2x3.CostResource
{
	public partial class @IfcAppliedValue : IIfcAppliedValue
	{
		Ifc4.MeasureResource.IfcLabel? IIfcAppliedValue.Name 
		{ 
			get
			{
				if (!Name.HasValue) return null;
				return new Ifc4.MeasureResource.IfcLabel(Name.Value);
			} 
		}
		Ifc4.MeasureResource.IfcText? IIfcAppliedValue.Description 
		{ 
			get
			{
				if (!Description.HasValue) return null;
				return new Ifc4.MeasureResource.IfcText(Description.Value);
			} 
		}
		IIfcAppliedValueSelect IIfcAppliedValue.AppliedValue 
		{ 
			get
			{
				if (AppliedValue == null) return null;
				if (AppliedValue is MeasureResource.IfcRatioMeasure) 
					return new Ifc4.MeasureResource.IfcRatioMeasure((double)(MeasureResource.IfcRatioMeasure)AppliedValue);
				var ifcmeasurewithunit = AppliedValue as MeasureResource.IfcMeasureWithUnit;
				if (ifcmeasurewithunit != null) 
					return ifcmeasurewithunit;
				if (AppliedValue is MeasureResource.IfcMonetaryMeasure) 
					return new Ifc4.MeasureResource.IfcMonetaryMeasure((double)(MeasureResource.IfcMonetaryMeasure)AppliedValue);
				return null;
			} 
		}
		IIfcMeasureWithUnit IIfcAppliedValue.UnitBasis 
		{ 
			get
			{
				return UnitBasis;
			} 
		}
		Ifc4.DateTimeResource.IfcDate? IIfcAppliedValue.ApplicableDate 
		{ 
			get
			{
				//## Handle return of ApplicableDate for which no match was found
				return ApplicableDate != null ? new Ifc4.DateTimeResource.IfcDate(ApplicableDate.ToISODateTimeString()) : null;
			    //##
			} 
		}
		Ifc4.DateTimeResource.IfcDate? IIfcAppliedValue.FixedUntilDate 
		{ 
			get
			{
				//## Handle return of FixedUntilDate for which no match was found
                return FixedUntilDate != null ? new Ifc4.DateTimeResource.IfcDate(FixedUntilDate.ToISODateTimeString()) : null;
				//##
			} 
		}
		Ifc4.MeasureResource.IfcLabel? IIfcAppliedValue.Category 
		{ 
			get
			{
				//## Handle return of Category for which no match was found
			    return null;
			    //##
			} 
		}
		Ifc4.MeasureResource.IfcLabel? IIfcAppliedValue.Condition 
		{ 
			get
			{
				//## Handle return of Condition for which no match was found
                return null;
				//##
			} 
		}
		Ifc4.Interfaces.IfcArithmeticOperatorEnum? IIfcAppliedValue.ArithmeticOperator 
		{ 
			get
			{
				//## Handle return of ArithmeticOperator for which no match was found
			    var relation = ValueOfComponents.FirstOrDefault();
                if(relation == null)
                    return null;
			    switch (relation.ArithmeticOperator)
			    {
			        case IfcArithmeticOperatorEnum.ADD:
			            return Ifc4.Interfaces.IfcArithmeticOperatorEnum.ADD;
			        case IfcArithmeticOperatorEnum.DIVIDE:
                        return Ifc4.Interfaces.IfcArithmeticOperatorEnum.DIVIDE;
			        case IfcArithmeticOperatorEnum.MULTIPLY:
                        return Ifc4.Interfaces.IfcArithmeticOperatorEnum.MULTIPLY;
			        case IfcArithmeticOperatorEnum.SUBTRACT:
                        return Ifc4.Interfaces.IfcArithmeticOperatorEnum.SUBTRACT;
			        default:
			            throw new System.ArgumentOutOfRangeException();
			    }
			    //##
			} 
		}
		IEnumerable<IIfcAppliedValue> IIfcAppliedValue.Components 
		{ 
			get
			{
				//## Handle return of Components for which no match was found
	            return ValueOfComponents.SelectMany(relationship => relationship.Components);
	            //##
			} 
		}
		IEnumerable<IIfcExternalReferenceRelationship> IIfcAppliedValue.HasExternalReference 
		{ 
			get
			{
				return Model.Instances.Where<IIfcExternalReferenceRelationship>(e => e.RelatedResourceObjects != null &&  e.RelatedResourceObjects.Contains(this), "RelatedResourceObjects", this);
			} 
		}
	//## Custom code
	//##
	}
}