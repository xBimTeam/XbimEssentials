// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc2x3.ExternalReferenceResource
{
	public partial class @IfcDocumentInformation : IIfcDocumentInformation
	{
		Ifc4.MeasureResource.IfcIdentifier IIfcDocumentInformation.Identification 
		{ 
			get
			{
				//## Handle return of Identification for which no match was found
			    return new Ifc4.MeasureResource.IfcIdentifier(DocumentId);
			    //##
			} 
		}
		Ifc4.MeasureResource.IfcLabel IIfcDocumentInformation.Name 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcLabel(Name);
			} 
		}
		Ifc4.MeasureResource.IfcText? IIfcDocumentInformation.Description 
		{ 
			get
			{
				if (!Description.HasValue) return null;
				return new Ifc4.MeasureResource.IfcText(Description.Value);
			} 
		}
		Ifc4.ExternalReferenceResource.IfcURIReference? IIfcDocumentInformation.Location 
		{ 
			get
			{
				//## Handle return of Location for which no match was found
			    var reference = DocumentReferences.FirstOrDefault(r => r.Location != null);
			    return reference != null
			        ? new Ifc4.ExternalReferenceResource.IfcURIReference(reference.Location)
			        : null;
			    //##
			} 
		}
		Ifc4.MeasureResource.IfcText? IIfcDocumentInformation.Purpose 
		{ 
			get
			{
				if (!Purpose.HasValue) return null;
				return new Ifc4.MeasureResource.IfcText(Purpose.Value);
			} 
		}
		Ifc4.MeasureResource.IfcText? IIfcDocumentInformation.IntendedUse 
		{ 
			get
			{
				if (!IntendedUse.HasValue) return null;
				return new Ifc4.MeasureResource.IfcText(IntendedUse.Value);
			} 
		}
		Ifc4.MeasureResource.IfcText? IIfcDocumentInformation.Scope 
		{ 
			get
			{
				if (!Scope.HasValue) return null;
				return new Ifc4.MeasureResource.IfcText(Scope.Value);
			} 
		}
		Ifc4.MeasureResource.IfcLabel? IIfcDocumentInformation.Revision 
		{ 
			get
			{
				if (!Revision.HasValue) return null;
				return new Ifc4.MeasureResource.IfcLabel(Revision.Value);
			} 
		}
		IIfcActorSelect IIfcDocumentInformation.DocumentOwner 
		{ 
			get
			{
				if (DocumentOwner == null) return null;
				var ifcorganization = DocumentOwner as ActorResource.IfcOrganization;
				if (ifcorganization != null) 
					return ifcorganization;
				var ifcperson = DocumentOwner as ActorResource.IfcPerson;
				if (ifcperson != null) 
					return ifcperson;
				var ifcpersonandorganization = DocumentOwner as ActorResource.IfcPersonAndOrganization;
				if (ifcpersonandorganization != null) 
					return ifcpersonandorganization;
				return null;
			} 
		}
		IEnumerable<IIfcActorSelect> IIfcDocumentInformation.Editors 
		{ 
			get
			{
				foreach (var member in Editors)
				{
					var ifcorganization = member as ActorResource.IfcOrganization;
					if (ifcorganization != null) 
						yield return ifcorganization;
					var ifcperson = member as ActorResource.IfcPerson;
					if (ifcperson != null) 
						yield return ifcperson;
					var ifcpersonandorganization = member as ActorResource.IfcPersonAndOrganization;
					if (ifcpersonandorganization != null) 
						yield return ifcpersonandorganization;
				}
			} 
		}
		Ifc4.DateTimeResource.IfcDateTime? IIfcDocumentInformation.CreationTime 
		{ 
			get
			{
				//## Handle return of CreationTime for which no match was found
			    return CreationTime != null
			        ? new Ifc4.DateTimeResource.IfcDateTime(CreationTime.ToISODateTimeString())
			        : null;
				//##
			} 
		}
		Ifc4.DateTimeResource.IfcDateTime? IIfcDocumentInformation.LastRevisionTime 
		{ 
			get
			{
				//## Handle return of LastRevisionTime for which no match was found
                return LastRevisionTime != null
                    ? new Ifc4.DateTimeResource.IfcDateTime(LastRevisionTime.ToISODateTimeString())
                    : null;
				//##
			} 
		}
		Ifc4.MeasureResource.IfcIdentifier? IIfcDocumentInformation.ElectronicFormat 
		{ 
			get
			{
				//## Handle return of ElectronicFormat for which no match was found
			    if (ElectronicFormat == null) return null;
			    if (ElectronicFormat.MimeContentType.HasValue)
                    return new Ifc4.MeasureResource.IfcIdentifier(ElectronicFormat.MimeContentType.Value);
			    if (!ElectronicFormat.FileExtension.HasValue) return null;

			    string ext = ElectronicFormat.FileExtension.Value;
			    ext = ext.Trim('.').ToLowerInvariant();
			    string mime;
			    return MimeTypeLoopUp.Types.TryGetValue(ext, out mime) ? mime : null;
			    //##
			} 
		}
		Ifc4.DateTimeResource.IfcDate? IIfcDocumentInformation.ValidFrom 
		{ 
			get
			{
				//## Handle return of ValidFrom for which no match was found
                return ValidFrom != null
                    ? new Ifc4.DateTimeResource.IfcDate(ValidFrom.ToISODateTimeString())
                    : null;
				//##
			} 
		}
		Ifc4.DateTimeResource.IfcDate? IIfcDocumentInformation.ValidUntil 
		{ 
			get
			{
				//## Handle return of ValidUntil for which no match was found
                return ValidUntil != null
                    ? new Ifc4.DateTimeResource.IfcDate(ValidUntil.ToISODateTimeString())
                    : null;
				//##
			} 
		}
		Ifc4.Interfaces.IfcDocumentConfidentialityEnum? IIfcDocumentInformation.Confidentiality 
		{ 
			get
			{
				switch (Confidentiality)
				{
					case IfcDocumentConfidentialityEnum.PUBLIC:
						return Ifc4.Interfaces.IfcDocumentConfidentialityEnum.PUBLIC;
					
					case IfcDocumentConfidentialityEnum.RESTRICTED:
						return Ifc4.Interfaces.IfcDocumentConfidentialityEnum.RESTRICTED;
					
					case IfcDocumentConfidentialityEnum.CONFIDENTIAL:
						return Ifc4.Interfaces.IfcDocumentConfidentialityEnum.CONFIDENTIAL;
					
					case IfcDocumentConfidentialityEnum.PERSONAL:
						return Ifc4.Interfaces.IfcDocumentConfidentialityEnum.PERSONAL;
					
					case IfcDocumentConfidentialityEnum.USERDEFINED:
						return Ifc4.Interfaces.IfcDocumentConfidentialityEnum.USERDEFINED;
					
					case IfcDocumentConfidentialityEnum.NOTDEFINED:
						return Ifc4.Interfaces.IfcDocumentConfidentialityEnum.NOTDEFINED;
					
					
					default:
						throw new System.ArgumentOutOfRangeException();
				}
			} 
		}
		Ifc4.Interfaces.IfcDocumentStatusEnum? IIfcDocumentInformation.Status 
		{ 
			get
			{
				switch (Status)
				{
					case IfcDocumentStatusEnum.DRAFT:
						return Ifc4.Interfaces.IfcDocumentStatusEnum.DRAFT;
					
					case IfcDocumentStatusEnum.FINALDRAFT:
						return Ifc4.Interfaces.IfcDocumentStatusEnum.FINALDRAFT;
					
					case IfcDocumentStatusEnum.FINAL:
						return Ifc4.Interfaces.IfcDocumentStatusEnum.FINAL;
					
					case IfcDocumentStatusEnum.REVISION:
						return Ifc4.Interfaces.IfcDocumentStatusEnum.REVISION;
					
					case IfcDocumentStatusEnum.NOTDEFINED:
						return Ifc4.Interfaces.IfcDocumentStatusEnum.NOTDEFINED;
					
					
					default:
						throw new System.ArgumentOutOfRangeException();
				}
			} 
		}
		IEnumerable<IIfcRelAssociatesDocument> IIfcDocumentInformation.DocumentInfoForObjects 
		{ 
			get
			{
				return Model.Instances.Where<IIfcRelAssociatesDocument>(e => (e.RelatingDocument as IfcDocumentInformation) == this, "RelatingDocument", this);
			} 
		}
		IEnumerable<IIfcDocumentReference> IIfcDocumentInformation.HasDocumentReferences 
		{ 
			get
			{
				return Model.Instances.Where<IIfcDocumentReference>(e => (e.ReferencedDocument as IfcDocumentInformation) == this, "ReferencedDocument", this);
			} 
		}
		IEnumerable<IIfcDocumentInformationRelationship> IIfcDocumentInformation.IsPointedTo 
		{ 
			get
			{
				return Model.Instances.Where<IIfcDocumentInformationRelationship>(e => e.RelatedDocuments != null &&  e.RelatedDocuments.Contains(this), "RelatedDocuments", this);
			} 
		}
		IEnumerable<IIfcDocumentInformationRelationship> IIfcDocumentInformation.IsPointer 
		{ 
			get
			{
				return Model.Instances.Where<IIfcDocumentInformationRelationship>(e => (e.RelatingDocument as IfcDocumentInformation) == this, "RelatingDocument", this);
			} 
		}
	//## Custom code
	//##
	}
}