// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc2x3.ExternalReferenceResource
{
	public partial class @IfcLibraryInformation : IIfcLibraryInformation
	{
		Ifc4.MeasureResource.IfcLabel IIfcLibraryInformation.Name 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcLabel(Name);
			} 
		}
		Ifc4.MeasureResource.IfcLabel? IIfcLibraryInformation.Version 
		{ 
			get
			{
				if (!Version.HasValue) return null;
				return new Ifc4.MeasureResource.IfcLabel(Version.Value);
			} 
		}
		IIfcActorSelect IIfcLibraryInformation.Publisher 
		{ 
			get
			{
				return Publisher;
			} 
		}
		Ifc4.DateTimeResource.IfcDateTime? IIfcLibraryInformation.VersionDate 
		{ 
			get
			{
				//## Handle return of VersionDate for which no match was found
			    return VersionDate != null
			        ? new Ifc4.DateTimeResource.IfcDateTime(VersionDate.ToISODateTimeString())
			        : null;
			    //##
			} 
		}
		Ifc4.ExternalReferenceResource.IfcURIReference? IIfcLibraryInformation.Location 
		{ 
			get
			{
				//## Handle return of Location for which no match was found
			    var reference = LibraryReference.FirstOrDefault(r => r.Location.HasValue);
			    return reference != null
			        // ReSharper disable once PossibleInvalidOperationException
			        ? new Ifc4.ExternalReferenceResource.IfcURIReference(reference.Location.Value)
			        : null;
			    //##
			} 
		}
		Ifc4.MeasureResource.IfcText? IIfcLibraryInformation.Description 
		{ 
			get
			{
				//## Handle return of Description for which no match was found
			    return null;
			    //##
			} 
		}
		IEnumerable<IIfcRelAssociatesLibrary> IIfcLibraryInformation.LibraryInfoForObjects 
		{ 
			get
			{
				return Model.Instances.Where<IIfcRelAssociatesLibrary>(e => (e.RelatingLibrary as IfcLibraryInformation) == this, "RelatingLibrary", this);
			} 
		}
		IEnumerable<IIfcLibraryReference> IIfcLibraryInformation.HasLibraryReferences 
		{ 
			get
			{
				return Model.Instances.Where<IIfcLibraryReference>(e => (e.ReferencedLibrary as IfcLibraryInformation) == this, "ReferencedLibrary", this);
			} 
		}
	//## Custom code
	//##
	}
}