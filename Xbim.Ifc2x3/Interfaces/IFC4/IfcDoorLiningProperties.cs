// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc2x3.SharedBldgElements
{
	public partial class @IfcDoorLiningProperties : IIfcDoorLiningProperties
	{
		Ifc4.MeasureResource.IfcPositiveLengthMeasure? IIfcDoorLiningProperties.LiningDepth 
		{ 
			get
			{
				if (!LiningDepth.HasValue) return null;
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(LiningDepth.Value);
			} 
		}
		Ifc4.MeasureResource.IfcNonNegativeLengthMeasure? IIfcDoorLiningProperties.LiningThickness 
		{ 
			get
			{
				if (!LiningThickness.HasValue) return null;
				return new Ifc4.MeasureResource.IfcNonNegativeLengthMeasure(LiningThickness.Value);
			} 
		}
		Ifc4.MeasureResource.IfcPositiveLengthMeasure? IIfcDoorLiningProperties.ThresholdDepth 
		{ 
			get
			{
				if (!ThresholdDepth.HasValue) return null;
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(ThresholdDepth.Value);
			} 
		}
		Ifc4.MeasureResource.IfcNonNegativeLengthMeasure? IIfcDoorLiningProperties.ThresholdThickness 
		{ 
			get
			{
				if (!ThresholdThickness.HasValue) return null;
				return new Ifc4.MeasureResource.IfcNonNegativeLengthMeasure(ThresholdThickness.Value);
			} 
		}
		Ifc4.MeasureResource.IfcNonNegativeLengthMeasure? IIfcDoorLiningProperties.TransomThickness 
		{ 
			get
			{
				if (!TransomThickness.HasValue) return null;
				return new Ifc4.MeasureResource.IfcNonNegativeLengthMeasure(TransomThickness.Value);
			} 
		}
		Ifc4.MeasureResource.IfcLengthMeasure? IIfcDoorLiningProperties.TransomOffset 
		{ 
			get
			{
				if (!TransomOffset.HasValue) return null;
				return new Ifc4.MeasureResource.IfcLengthMeasure(TransomOffset.Value);
			} 
		}
		Ifc4.MeasureResource.IfcLengthMeasure? IIfcDoorLiningProperties.LiningOffset 
		{ 
			get
			{
				if (!LiningOffset.HasValue) return null;
				return new Ifc4.MeasureResource.IfcLengthMeasure(LiningOffset.Value);
			} 
		}
		Ifc4.MeasureResource.IfcLengthMeasure? IIfcDoorLiningProperties.ThresholdOffset 
		{ 
			get
			{
				if (!ThresholdOffset.HasValue) return null;
				return new Ifc4.MeasureResource.IfcLengthMeasure(ThresholdOffset.Value);
			} 
		}
		Ifc4.MeasureResource.IfcPositiveLengthMeasure? IIfcDoorLiningProperties.CasingThickness 
		{ 
			get
			{
				if (!CasingThickness.HasValue) return null;
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(CasingThickness.Value);
			} 
		}
		Ifc4.MeasureResource.IfcPositiveLengthMeasure? IIfcDoorLiningProperties.CasingDepth 
		{ 
			get
			{
				if (!CasingDepth.HasValue) return null;
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(CasingDepth.Value);
			} 
		}
		IIfcShapeAspect IIfcDoorLiningProperties.ShapeAspectStyle 
		{ 
			get
			{
				return ShapeAspectStyle;
			} 
		}
		Ifc4.MeasureResource.IfcLengthMeasure? IIfcDoorLiningProperties.LiningToPanelOffsetX 
		{ 
			get
			{
				//## Handle return of LiningToPanelOffsetX for which no match was found
			    return null;
			    //##
			} 
		}
		Ifc4.MeasureResource.IfcLengthMeasure? IIfcDoorLiningProperties.LiningToPanelOffsetY 
		{ 
			get
			{
				//## Handle return of LiningToPanelOffsetY for which no match was found
                return null;
				//##
			} 
		}
	//## Custom code
	//##
	}
}