// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;

//## Custom using statements
//##

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc4x3.ProductExtension
{
	public partial class @IfcSpace : IIfcSpace
	{

		[CrossSchemaAttribute(typeof(IIfcSpace), 10)]
		Ifc4.Interfaces.IfcSpaceTypeEnum? IIfcSpace.PredefinedType 
		{ 
			get
			{
				//## Custom code to handle enumeration of PredefinedType
				//##
				switch (PredefinedType)
				{
					case IfcSpaceTypeEnum.BERTH:
						//## Handle translation of BERTH member from IfcSpaceTypeEnum in property PredefinedType
						return this.GetUserDefined<Ifc4.Interfaces.IfcSpaceTypeEnum>();
						//##
					case IfcSpaceTypeEnum.EXTERNAL:
						return Ifc4.Interfaces.IfcSpaceTypeEnum.EXTERNAL;
					case IfcSpaceTypeEnum.GFA:
						return Ifc4.Interfaces.IfcSpaceTypeEnum.GFA;
					case IfcSpaceTypeEnum.INTERNAL:
						return Ifc4.Interfaces.IfcSpaceTypeEnum.INTERNAL;
					case IfcSpaceTypeEnum.PARKING:
						return Ifc4.Interfaces.IfcSpaceTypeEnum.PARKING;
					case IfcSpaceTypeEnum.SPACE:
						return Ifc4.Interfaces.IfcSpaceTypeEnum.SPACE;
					case IfcSpaceTypeEnum.USERDEFINED:
						//## Optional custom handling of PredefinedType == .USERDEFINED. 
						//##
						return Ifc4.Interfaces.IfcSpaceTypeEnum.USERDEFINED;
					case IfcSpaceTypeEnum.NOTDEFINED:
						return Ifc4.Interfaces.IfcSpaceTypeEnum.NOTDEFINED;
					case null: 
						return null;
					
					default:
						throw new System.ArgumentOutOfRangeException();
				}
			} 
			set
			{
				//## Custom code to handle setting of enumeration of PredefinedType
				//##
				switch (value)
				{
					case Ifc4.Interfaces.IfcSpaceTypeEnum.SPACE:
						PredefinedType = IfcSpaceTypeEnum.SPACE;
						return;
					case Ifc4.Interfaces.IfcSpaceTypeEnum.PARKING:
						PredefinedType = IfcSpaceTypeEnum.PARKING;
						return;
					case Ifc4.Interfaces.IfcSpaceTypeEnum.GFA:
						PredefinedType = IfcSpaceTypeEnum.GFA;
						return;
					case Ifc4.Interfaces.IfcSpaceTypeEnum.INTERNAL:
						PredefinedType = IfcSpaceTypeEnum.INTERNAL;
						return;
					case Ifc4.Interfaces.IfcSpaceTypeEnum.EXTERNAL:
						PredefinedType = IfcSpaceTypeEnum.EXTERNAL;
						return;
					case Ifc4.Interfaces.IfcSpaceTypeEnum.USERDEFINED:
						PredefinedType = IfcSpaceTypeEnum.USERDEFINED;
						return;
					case Ifc4.Interfaces.IfcSpaceTypeEnum.NOTDEFINED:
						PredefinedType = IfcSpaceTypeEnum.NOTDEFINED;
						return;
					
					case null:
						PredefinedType = null;
						return;
					default:
						throw new System.ArgumentOutOfRangeException();
				}
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcSpace), 11)]
		Ifc4.MeasureResource.IfcLengthMeasure? IIfcSpace.ElevationWithFlooring 
		{ 
			get
			{
				if (!ElevationWithFlooring.HasValue) return null;
				return new Ifc4.MeasureResource.IfcLengthMeasure(ElevationWithFlooring.Value);
			} 
			set
			{
				ElevationWithFlooring = value.HasValue ? 
					new MeasureResource.IfcLengthMeasure(value.Value) :  
					 new MeasureResource.IfcLengthMeasure?() ;
				
			}
		}
		IEnumerable<IIfcRelCoversSpaces> IIfcSpace.HasCoverings 
		{ 
			get
			{
				return Model.Instances.Where<IIfcRelCoversSpaces>(e => (e.RelatingSpace as IfcSpace) == this, "RelatingSpace", this);
			} 
		}
		IEnumerable<IIfcRelSpaceBoundary> IIfcSpace.BoundedBy 
		{ 
			get
			{
				return Model.Instances.Where<IIfcRelSpaceBoundary>(e => (e.RelatingSpace as IfcSpace) == this, "RelatingSpace", this);
			} 
		}
	//## Custom code
		/// <summary>
		/// Returns all spaces that are sub-spaces of this building
		/// </summary>
		/// <returns></returns>
		public IEnumerable<IIfcSpace> Spaces
		{
			get
			{
				return IsDecomposedBy.SelectMany(s => s.RelatedObjects).OfType<IIfcSpace>();
			}
		}
		//##
	}
}