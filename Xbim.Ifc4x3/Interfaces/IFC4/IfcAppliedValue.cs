// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;

//## Custom using statements
//##

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc4x3.CostResource
{
	public partial class @IfcAppliedValue : IIfcAppliedValue
	{

		[CrossSchemaAttribute(typeof(IIfcAppliedValue), 1)]
		Ifc4.MeasureResource.IfcLabel? IIfcAppliedValue.Name 
		{ 
			get
			{
				if (!Name.HasValue) return null;
				return new Ifc4.MeasureResource.IfcLabel(Name.Value);
			} 
			set
			{
				Name = value.HasValue ? 
					new MeasureResource.IfcLabel(value.Value) :  
					 new MeasureResource.IfcLabel?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAppliedValue), 2)]
		Ifc4.MeasureResource.IfcText? IIfcAppliedValue.Description 
		{ 
			get
			{
				if (!Description.HasValue) return null;
				return new Ifc4.MeasureResource.IfcText(Description.Value);
			} 
			set
			{
				Description = value.HasValue ? 
					new MeasureResource.IfcText(value.Value) :  
					 new MeasureResource.IfcText?() ;
				
			}
		}

		private  IIfcAppliedValueSelect _appliedValue4;


		[CrossSchemaAttribute(typeof(IIfcAppliedValue), 3)]
		IIfcAppliedValueSelect IIfcAppliedValue.AppliedValue 
		{ 
			get
			{
				if (_appliedValue4 != null) return _appliedValue4;
				if (AppliedValue == null) return null;
				var ifcmeasurewithunit = AppliedValue as MeasureResource.IfcMeasureWithUnit;
				if (ifcmeasurewithunit != null) 
					return ifcmeasurewithunit;
				var ifcreference = AppliedValue as ConstraintResource.IfcReference;
				if (ifcreference != null) 
					return ifcreference;
				if (AppliedValue is MeasureResource.IfcAbsorbedDoseMeasure) 
					return new Ifc4.MeasureResource.IfcAbsorbedDoseMeasure((MeasureResource.IfcAbsorbedDoseMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcAccelerationMeasure) 
					return new Ifc4.MeasureResource.IfcAccelerationMeasure((MeasureResource.IfcAccelerationMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcAngularVelocityMeasure) 
					return new Ifc4.MeasureResource.IfcAngularVelocityMeasure((MeasureResource.IfcAngularVelocityMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcAreaDensityMeasure) 
					return new Ifc4.MeasureResource.IfcAreaDensityMeasure((MeasureResource.IfcAreaDensityMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcCompoundPlaneAngleMeasure) 
					return new Ifc4.MeasureResource.IfcCompoundPlaneAngleMeasure((MeasureResource.IfcCompoundPlaneAngleMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcCurvatureMeasure) 
					return new Ifc4.MeasureResource.IfcCurvatureMeasure((MeasureResource.IfcCurvatureMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcDoseEquivalentMeasure) 
					return new Ifc4.MeasureResource.IfcDoseEquivalentMeasure((MeasureResource.IfcDoseEquivalentMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcDynamicViscosityMeasure) 
					return new Ifc4.MeasureResource.IfcDynamicViscosityMeasure((MeasureResource.IfcDynamicViscosityMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcElectricCapacitanceMeasure) 
					return new Ifc4.MeasureResource.IfcElectricCapacitanceMeasure((MeasureResource.IfcElectricCapacitanceMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcElectricChargeMeasure) 
					return new Ifc4.MeasureResource.IfcElectricChargeMeasure((MeasureResource.IfcElectricChargeMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcElectricConductanceMeasure) 
					return new Ifc4.MeasureResource.IfcElectricConductanceMeasure((MeasureResource.IfcElectricConductanceMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcElectricResistanceMeasure) 
					return new Ifc4.MeasureResource.IfcElectricResistanceMeasure((MeasureResource.IfcElectricResistanceMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcElectricVoltageMeasure) 
					return new Ifc4.MeasureResource.IfcElectricVoltageMeasure((MeasureResource.IfcElectricVoltageMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcEnergyMeasure) 
					return new Ifc4.MeasureResource.IfcEnergyMeasure((MeasureResource.IfcEnergyMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcForceMeasure) 
					return new Ifc4.MeasureResource.IfcForceMeasure((MeasureResource.IfcForceMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcFrequencyMeasure) 
					return new Ifc4.MeasureResource.IfcFrequencyMeasure((MeasureResource.IfcFrequencyMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcHeatFluxDensityMeasure) 
					return new Ifc4.MeasureResource.IfcHeatFluxDensityMeasure((MeasureResource.IfcHeatFluxDensityMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcHeatingValueMeasure) 
					return new Ifc4.MeasureResource.IfcHeatingValueMeasure((MeasureResource.IfcHeatingValueMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcIlluminanceMeasure) 
					return new Ifc4.MeasureResource.IfcIlluminanceMeasure((MeasureResource.IfcIlluminanceMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcInductanceMeasure) 
					return new Ifc4.MeasureResource.IfcInductanceMeasure((MeasureResource.IfcInductanceMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcIntegerCountRateMeasure) 
					return new Ifc4.MeasureResource.IfcIntegerCountRateMeasure((MeasureResource.IfcIntegerCountRateMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcIonConcentrationMeasure) 
					return new Ifc4.MeasureResource.IfcIonConcentrationMeasure((MeasureResource.IfcIonConcentrationMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcIsothermalMoistureCapacityMeasure) 
					return new Ifc4.MeasureResource.IfcIsothermalMoistureCapacityMeasure((MeasureResource.IfcIsothermalMoistureCapacityMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcKinematicViscosityMeasure) 
					return new Ifc4.MeasureResource.IfcKinematicViscosityMeasure((MeasureResource.IfcKinematicViscosityMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcLinearForceMeasure) 
					return new Ifc4.MeasureResource.IfcLinearForceMeasure((MeasureResource.IfcLinearForceMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcLinearMomentMeasure) 
					return new Ifc4.MeasureResource.IfcLinearMomentMeasure((MeasureResource.IfcLinearMomentMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcLinearStiffnessMeasure) 
					return new Ifc4.MeasureResource.IfcLinearStiffnessMeasure((MeasureResource.IfcLinearStiffnessMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcLinearVelocityMeasure) 
					return new Ifc4.MeasureResource.IfcLinearVelocityMeasure((MeasureResource.IfcLinearVelocityMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcLuminousFluxMeasure) 
					return new Ifc4.MeasureResource.IfcLuminousFluxMeasure((MeasureResource.IfcLuminousFluxMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcLuminousIntensityDistributionMeasure) 
					return new Ifc4.MeasureResource.IfcLuminousIntensityDistributionMeasure((MeasureResource.IfcLuminousIntensityDistributionMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcMagneticFluxDensityMeasure) 
					return new Ifc4.MeasureResource.IfcMagneticFluxDensityMeasure((MeasureResource.IfcMagneticFluxDensityMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcMagneticFluxMeasure) 
					return new Ifc4.MeasureResource.IfcMagneticFluxMeasure((MeasureResource.IfcMagneticFluxMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcMassDensityMeasure) 
					return new Ifc4.MeasureResource.IfcMassDensityMeasure((MeasureResource.IfcMassDensityMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcMassFlowRateMeasure) 
					return new Ifc4.MeasureResource.IfcMassFlowRateMeasure((MeasureResource.IfcMassFlowRateMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcMassPerLengthMeasure) 
					return new Ifc4.MeasureResource.IfcMassPerLengthMeasure((MeasureResource.IfcMassPerLengthMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcModulusOfElasticityMeasure) 
					return new Ifc4.MeasureResource.IfcModulusOfElasticityMeasure((MeasureResource.IfcModulusOfElasticityMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcModulusOfLinearSubgradeReactionMeasure) 
					return new Ifc4.MeasureResource.IfcModulusOfLinearSubgradeReactionMeasure((MeasureResource.IfcModulusOfLinearSubgradeReactionMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcModulusOfRotationalSubgradeReactionMeasure) 
					return new Ifc4.MeasureResource.IfcModulusOfRotationalSubgradeReactionMeasure((MeasureResource.IfcModulusOfRotationalSubgradeReactionMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcModulusOfSubgradeReactionMeasure) 
					return new Ifc4.MeasureResource.IfcModulusOfSubgradeReactionMeasure((MeasureResource.IfcModulusOfSubgradeReactionMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcMoistureDiffusivityMeasure) 
					return new Ifc4.MeasureResource.IfcMoistureDiffusivityMeasure((MeasureResource.IfcMoistureDiffusivityMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcMolecularWeightMeasure) 
					return new Ifc4.MeasureResource.IfcMolecularWeightMeasure((MeasureResource.IfcMolecularWeightMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcMomentOfInertiaMeasure) 
					return new Ifc4.MeasureResource.IfcMomentOfInertiaMeasure((MeasureResource.IfcMomentOfInertiaMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcMonetaryMeasure) 
					return new Ifc4.MeasureResource.IfcMonetaryMeasure((MeasureResource.IfcMonetaryMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcPHMeasure) 
					return new Ifc4.MeasureResource.IfcPHMeasure((MeasureResource.IfcPHMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcPlanarForceMeasure) 
					return new Ifc4.MeasureResource.IfcPlanarForceMeasure((MeasureResource.IfcPlanarForceMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcPowerMeasure) 
					return new Ifc4.MeasureResource.IfcPowerMeasure((MeasureResource.IfcPowerMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcPressureMeasure) 
					return new Ifc4.MeasureResource.IfcPressureMeasure((MeasureResource.IfcPressureMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcRadioActivityMeasure) 
					return new Ifc4.MeasureResource.IfcRadioActivityMeasure((MeasureResource.IfcRadioActivityMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcRotationalFrequencyMeasure) 
					return new Ifc4.MeasureResource.IfcRotationalFrequencyMeasure((MeasureResource.IfcRotationalFrequencyMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcRotationalMassMeasure) 
					return new Ifc4.MeasureResource.IfcRotationalMassMeasure((MeasureResource.IfcRotationalMassMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcRotationalStiffnessMeasure) 
					return new Ifc4.MeasureResource.IfcRotationalStiffnessMeasure((MeasureResource.IfcRotationalStiffnessMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcSectionModulusMeasure) 
					return new Ifc4.MeasureResource.IfcSectionModulusMeasure((MeasureResource.IfcSectionModulusMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcSectionalAreaIntegralMeasure) 
					return new Ifc4.MeasureResource.IfcSectionalAreaIntegralMeasure((MeasureResource.IfcSectionalAreaIntegralMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcShearModulusMeasure) 
					return new Ifc4.MeasureResource.IfcShearModulusMeasure((MeasureResource.IfcShearModulusMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcSoundPowerLevelMeasure) 
					return new Ifc4.MeasureResource.IfcSoundPowerMeasure((MeasureResource.IfcSoundPowerLevelMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcSoundPowerMeasure) 
					return new Ifc4.MeasureResource.IfcSoundPowerMeasure((MeasureResource.IfcSoundPowerMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcSoundPressureLevelMeasure) 
					return new Ifc4.MeasureResource.IfcSoundPressureMeasure((MeasureResource.IfcSoundPressureLevelMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcSoundPressureMeasure) 
					return new Ifc4.MeasureResource.IfcSoundPressureMeasure((MeasureResource.IfcSoundPressureMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcSpecificHeatCapacityMeasure) 
					return new Ifc4.MeasureResource.IfcSpecificHeatCapacityMeasure((MeasureResource.IfcSpecificHeatCapacityMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcTemperatureGradientMeasure) 
					return new Ifc4.MeasureResource.IfcTemperatureGradientMeasure((MeasureResource.IfcTemperatureGradientMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcTemperatureRateOfChangeMeasure) 
					return new Ifc4.MeasureResource.IfcTemperatureRateOfChangeMeasure((MeasureResource.IfcTemperatureRateOfChangeMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcThermalAdmittanceMeasure) 
					return new Ifc4.MeasureResource.IfcThermalAdmittanceMeasure((MeasureResource.IfcThermalAdmittanceMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcThermalConductivityMeasure) 
					return new Ifc4.MeasureResource.IfcThermalConductivityMeasure((MeasureResource.IfcThermalConductivityMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcThermalExpansionCoefficientMeasure) 
					return new Ifc4.MeasureResource.IfcThermalExpansionCoefficientMeasure((MeasureResource.IfcThermalExpansionCoefficientMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcThermalResistanceMeasure) 
					return new Ifc4.MeasureResource.IfcThermalResistanceMeasure((MeasureResource.IfcThermalResistanceMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcThermalTransmittanceMeasure) 
					return new Ifc4.MeasureResource.IfcThermalTransmittanceMeasure((MeasureResource.IfcThermalTransmittanceMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcTorqueMeasure) 
					return new Ifc4.MeasureResource.IfcTorqueMeasure((MeasureResource.IfcTorqueMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcVaporPermeabilityMeasure) 
					return new Ifc4.MeasureResource.IfcVaporPermeabilityMeasure((MeasureResource.IfcVaporPermeabilityMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcVolumetricFlowRateMeasure) 
					return new Ifc4.MeasureResource.IfcVolumetricFlowRateMeasure((MeasureResource.IfcVolumetricFlowRateMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcWarpingConstantMeasure) 
					return new Ifc4.MeasureResource.IfcWarpingConstantMeasure((MeasureResource.IfcWarpingConstantMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcWarpingMomentMeasure) 
					return new Ifc4.MeasureResource.IfcWarpingMomentMeasure((MeasureResource.IfcWarpingMomentMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcAmountOfSubstanceMeasure) 
					return new Ifc4.MeasureResource.IfcAmountOfSubstanceMeasure((MeasureResource.IfcAmountOfSubstanceMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcAreaMeasure) 
					return new Ifc4.MeasureResource.IfcAreaMeasure((MeasureResource.IfcAreaMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcComplexNumber) 
					return new Ifc4.MeasureResource.IfcComplexNumber((MeasureResource.IfcComplexNumber)AppliedValue);
				if (AppliedValue is MeasureResource.IfcContextDependentMeasure) 
					return new Ifc4.MeasureResource.IfcContextDependentMeasure((MeasureResource.IfcContextDependentMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcCountMeasure) 
					return new Ifc4.MeasureResource.IfcCountMeasure((MeasureResource.IfcCountMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcDescriptiveMeasure) 
					return new Ifc4.MeasureResource.IfcDescriptiveMeasure((MeasureResource.IfcDescriptiveMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcElectricCurrentMeasure) 
					return new Ifc4.MeasureResource.IfcElectricCurrentMeasure((MeasureResource.IfcElectricCurrentMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcLengthMeasure) 
					return new Ifc4.MeasureResource.IfcLengthMeasure((MeasureResource.IfcLengthMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcLuminousIntensityMeasure) 
					return new Ifc4.MeasureResource.IfcLuminousIntensityMeasure((MeasureResource.IfcLuminousIntensityMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcMassMeasure) 
					return new Ifc4.MeasureResource.IfcMassMeasure((MeasureResource.IfcMassMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcNonNegativeLengthMeasure) 
					return new Ifc4.MeasureResource.IfcNonNegativeLengthMeasure((MeasureResource.IfcNonNegativeLengthMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcNormalisedRatioMeasure) 
					return new Ifc4.MeasureResource.IfcNormalisedRatioMeasure((MeasureResource.IfcNormalisedRatioMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcNumericMeasure) 
					return new Ifc4.MeasureResource.IfcNumericMeasure((MeasureResource.IfcNumericMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcParameterValue) 
					return new Ifc4.MeasureResource.IfcParameterValue((MeasureResource.IfcParameterValue)AppliedValue);
				if (AppliedValue is MeasureResource.IfcPlaneAngleMeasure) 
					return new Ifc4.MeasureResource.IfcPlaneAngleMeasure((MeasureResource.IfcPlaneAngleMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcPositiveLengthMeasure) 
					return new Ifc4.MeasureResource.IfcPositiveLengthMeasure((MeasureResource.IfcPositiveLengthMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcPositivePlaneAngleMeasure) 
					return new Ifc4.MeasureResource.IfcPositivePlaneAngleMeasure((MeasureResource.IfcPositivePlaneAngleMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcPositiveRatioMeasure) 
					return new Ifc4.MeasureResource.IfcPositiveRatioMeasure((MeasureResource.IfcPositiveRatioMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcRatioMeasure) 
					return new Ifc4.MeasureResource.IfcRatioMeasure((MeasureResource.IfcRatioMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcSolidAngleMeasure) 
					return new Ifc4.MeasureResource.IfcSolidAngleMeasure((MeasureResource.IfcSolidAngleMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcThermodynamicTemperatureMeasure) 
					return new Ifc4.MeasureResource.IfcThermodynamicTemperatureMeasure((MeasureResource.IfcThermodynamicTemperatureMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcTimeMeasure) 
					return new Ifc4.MeasureResource.IfcTimeMeasure((MeasureResource.IfcTimeMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcVolumeMeasure) 
					return new Ifc4.MeasureResource.IfcVolumeMeasure((MeasureResource.IfcVolumeMeasure)AppliedValue);
				if (AppliedValue is MeasureResource.IfcBinary) 
					return new Ifc4.MeasureResource.IfcBinary((MeasureResource.IfcBinary)AppliedValue);
				if (AppliedValue is MeasureResource.IfcBoolean) 
					return new Ifc4.MeasureResource.IfcBoolean((MeasureResource.IfcBoolean)AppliedValue);
				if (AppliedValue is DateTimeResource.IfcDate) 
					return new Ifc4.DateTimeResource.IfcDate((DateTimeResource.IfcDate)AppliedValue);
				if (AppliedValue is DateTimeResource.IfcDateTime) 
					return new Ifc4.DateTimeResource.IfcDateTime((DateTimeResource.IfcDateTime)AppliedValue);
				if (AppliedValue is DateTimeResource.IfcDuration) 
					return new Ifc4.DateTimeResource.IfcDuration((DateTimeResource.IfcDuration)AppliedValue);
				if (AppliedValue is MeasureResource.IfcIdentifier) 
					return new Ifc4.MeasureResource.IfcIdentifier((MeasureResource.IfcIdentifier)AppliedValue);
				if (AppliedValue is MeasureResource.IfcInteger) 
					return new Ifc4.MeasureResource.IfcInteger((MeasureResource.IfcInteger)AppliedValue);
				if (AppliedValue is MeasureResource.IfcLabel) 
					return new Ifc4.MeasureResource.IfcLabel((MeasureResource.IfcLabel)AppliedValue);
				if (AppliedValue is MeasureResource.IfcLogical) 
					return new Ifc4.MeasureResource.IfcLogical((MeasureResource.IfcLogical)AppliedValue);
				if (AppliedValue is MeasureResource.IfcPositiveInteger) 
					return new Ifc4.MeasureResource.IfcPositiveInteger((MeasureResource.IfcPositiveInteger)AppliedValue);
				if (AppliedValue is MeasureResource.IfcReal) 
					return new Ifc4.MeasureResource.IfcReal((MeasureResource.IfcReal)AppliedValue);
				if (AppliedValue is MeasureResource.IfcText) 
					return new Ifc4.MeasureResource.IfcText((MeasureResource.IfcText)AppliedValue);
				if (AppliedValue is DateTimeResource.IfcTime) 
					return new Ifc4.DateTimeResource.IfcTime((DateTimeResource.IfcTime)AppliedValue);
				if (AppliedValue is DateTimeResource.IfcTimeStamp) 
					return new Ifc4.DateTimeResource.IfcTimeStamp((DateTimeResource.IfcTimeStamp)AppliedValue);
				if (AppliedValue is MeasureResource.IfcURIReference)
					//## Handle defined type IfcURIReference which is not a part of the target select interface IIfcAppliedValueSelect in property AppliedValue
					return new Ifc4.MeasureResource.IfcText(((MeasureResource.IfcURIReference)AppliedValue).Value.ToString());
					//##
				return null;
			} 
			set
			{
				if (value == null)
				{
					AppliedValue = null;
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}	
				var ifcmeasurewithunit = value as MeasureResource.IfcMeasureWithUnit;
				if (ifcmeasurewithunit != null) 
				{
					AppliedValue = ifcmeasurewithunit;
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				var ifcreference = value as ConstraintResource.IfcReference;
				if (ifcreference != null) 
				{
					AppliedValue = ifcreference;
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcAbsorbedDoseMeasure) 
				{
					AppliedValue = new MeasureResource.IfcAbsorbedDoseMeasure((Ifc4.MeasureResource.IfcAbsorbedDoseMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcAccelerationMeasure) 
				{
					AppliedValue = new MeasureResource.IfcAccelerationMeasure((Ifc4.MeasureResource.IfcAccelerationMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcAngularVelocityMeasure) 
				{
					AppliedValue = new MeasureResource.IfcAngularVelocityMeasure((Ifc4.MeasureResource.IfcAngularVelocityMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcAreaDensityMeasure) 
				{
					AppliedValue = new MeasureResource.IfcAreaDensityMeasure((Ifc4.MeasureResource.IfcAreaDensityMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcCompoundPlaneAngleMeasure) 
				{
					AppliedValue = new MeasureResource.IfcCompoundPlaneAngleMeasure((Ifc4.MeasureResource.IfcCompoundPlaneAngleMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcCurvatureMeasure) 
				{
					AppliedValue = new MeasureResource.IfcCurvatureMeasure((Ifc4.MeasureResource.IfcCurvatureMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcDoseEquivalentMeasure) 
				{
					AppliedValue = new MeasureResource.IfcDoseEquivalentMeasure((Ifc4.MeasureResource.IfcDoseEquivalentMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcDynamicViscosityMeasure) 
				{
					AppliedValue = new MeasureResource.IfcDynamicViscosityMeasure((Ifc4.MeasureResource.IfcDynamicViscosityMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcElectricCapacitanceMeasure) 
				{
					AppliedValue = new MeasureResource.IfcElectricCapacitanceMeasure((Ifc4.MeasureResource.IfcElectricCapacitanceMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcElectricChargeMeasure) 
				{
					AppliedValue = new MeasureResource.IfcElectricChargeMeasure((Ifc4.MeasureResource.IfcElectricChargeMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcElectricConductanceMeasure) 
				{
					AppliedValue = new MeasureResource.IfcElectricConductanceMeasure((Ifc4.MeasureResource.IfcElectricConductanceMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcElectricResistanceMeasure) 
				{
					AppliedValue = new MeasureResource.IfcElectricResistanceMeasure((Ifc4.MeasureResource.IfcElectricResistanceMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcElectricVoltageMeasure) 
				{
					AppliedValue = new MeasureResource.IfcElectricVoltageMeasure((Ifc4.MeasureResource.IfcElectricVoltageMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcEnergyMeasure) 
				{
					AppliedValue = new MeasureResource.IfcEnergyMeasure((Ifc4.MeasureResource.IfcEnergyMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcForceMeasure) 
				{
					AppliedValue = new MeasureResource.IfcForceMeasure((Ifc4.MeasureResource.IfcForceMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcFrequencyMeasure) 
				{
					AppliedValue = new MeasureResource.IfcFrequencyMeasure((Ifc4.MeasureResource.IfcFrequencyMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcHeatFluxDensityMeasure) 
				{
					AppliedValue = new MeasureResource.IfcHeatFluxDensityMeasure((Ifc4.MeasureResource.IfcHeatFluxDensityMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcHeatingValueMeasure) 
				{
					AppliedValue = new MeasureResource.IfcHeatingValueMeasure((Ifc4.MeasureResource.IfcHeatingValueMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcIlluminanceMeasure) 
				{
					AppliedValue = new MeasureResource.IfcIlluminanceMeasure((Ifc4.MeasureResource.IfcIlluminanceMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcInductanceMeasure) 
				{
					AppliedValue = new MeasureResource.IfcInductanceMeasure((Ifc4.MeasureResource.IfcInductanceMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcIntegerCountRateMeasure) 
				{
					AppliedValue = new MeasureResource.IfcIntegerCountRateMeasure((Ifc4.MeasureResource.IfcIntegerCountRateMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcIonConcentrationMeasure) 
				{
					AppliedValue = new MeasureResource.IfcIonConcentrationMeasure((Ifc4.MeasureResource.IfcIonConcentrationMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcIsothermalMoistureCapacityMeasure) 
				{
					AppliedValue = new MeasureResource.IfcIsothermalMoistureCapacityMeasure((Ifc4.MeasureResource.IfcIsothermalMoistureCapacityMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcKinematicViscosityMeasure) 
				{
					AppliedValue = new MeasureResource.IfcKinematicViscosityMeasure((Ifc4.MeasureResource.IfcKinematicViscosityMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcLinearForceMeasure) 
				{
					AppliedValue = new MeasureResource.IfcLinearForceMeasure((Ifc4.MeasureResource.IfcLinearForceMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcLinearMomentMeasure) 
				{
					AppliedValue = new MeasureResource.IfcLinearMomentMeasure((Ifc4.MeasureResource.IfcLinearMomentMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcLinearStiffnessMeasure) 
				{
					AppliedValue = new MeasureResource.IfcLinearStiffnessMeasure((Ifc4.MeasureResource.IfcLinearStiffnessMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcLinearVelocityMeasure) 
				{
					AppliedValue = new MeasureResource.IfcLinearVelocityMeasure((Ifc4.MeasureResource.IfcLinearVelocityMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcLuminousFluxMeasure) 
				{
					AppliedValue = new MeasureResource.IfcLuminousFluxMeasure((Ifc4.MeasureResource.IfcLuminousFluxMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcLuminousIntensityDistributionMeasure) 
				{
					AppliedValue = new MeasureResource.IfcLuminousIntensityDistributionMeasure((Ifc4.MeasureResource.IfcLuminousIntensityDistributionMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcMagneticFluxDensityMeasure) 
				{
					AppliedValue = new MeasureResource.IfcMagneticFluxDensityMeasure((Ifc4.MeasureResource.IfcMagneticFluxDensityMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcMagneticFluxMeasure) 
				{
					AppliedValue = new MeasureResource.IfcMagneticFluxMeasure((Ifc4.MeasureResource.IfcMagneticFluxMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcMassDensityMeasure) 
				{
					AppliedValue = new MeasureResource.IfcMassDensityMeasure((Ifc4.MeasureResource.IfcMassDensityMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcMassFlowRateMeasure) 
				{
					AppliedValue = new MeasureResource.IfcMassFlowRateMeasure((Ifc4.MeasureResource.IfcMassFlowRateMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcMassPerLengthMeasure) 
				{
					AppliedValue = new MeasureResource.IfcMassPerLengthMeasure((Ifc4.MeasureResource.IfcMassPerLengthMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcModulusOfElasticityMeasure) 
				{
					AppliedValue = new MeasureResource.IfcModulusOfElasticityMeasure((Ifc4.MeasureResource.IfcModulusOfElasticityMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcModulusOfLinearSubgradeReactionMeasure) 
				{
					AppliedValue = new MeasureResource.IfcModulusOfLinearSubgradeReactionMeasure((Ifc4.MeasureResource.IfcModulusOfLinearSubgradeReactionMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcModulusOfRotationalSubgradeReactionMeasure) 
				{
					AppliedValue = new MeasureResource.IfcModulusOfRotationalSubgradeReactionMeasure((Ifc4.MeasureResource.IfcModulusOfRotationalSubgradeReactionMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcModulusOfSubgradeReactionMeasure) 
				{
					AppliedValue = new MeasureResource.IfcModulusOfSubgradeReactionMeasure((Ifc4.MeasureResource.IfcModulusOfSubgradeReactionMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcMoistureDiffusivityMeasure) 
				{
					AppliedValue = new MeasureResource.IfcMoistureDiffusivityMeasure((Ifc4.MeasureResource.IfcMoistureDiffusivityMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcMolecularWeightMeasure) 
				{
					AppliedValue = new MeasureResource.IfcMolecularWeightMeasure((Ifc4.MeasureResource.IfcMolecularWeightMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcMomentOfInertiaMeasure) 
				{
					AppliedValue = new MeasureResource.IfcMomentOfInertiaMeasure((Ifc4.MeasureResource.IfcMomentOfInertiaMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcMonetaryMeasure) 
				{
					AppliedValue = new MeasureResource.IfcMonetaryMeasure((Ifc4.MeasureResource.IfcMonetaryMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcPHMeasure) 
				{
					AppliedValue = new MeasureResource.IfcPHMeasure((Ifc4.MeasureResource.IfcPHMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcPlanarForceMeasure) 
				{
					AppliedValue = new MeasureResource.IfcPlanarForceMeasure((Ifc4.MeasureResource.IfcPlanarForceMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcPowerMeasure) 
				{
					AppliedValue = new MeasureResource.IfcPowerMeasure((Ifc4.MeasureResource.IfcPowerMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcPressureMeasure) 
				{
					AppliedValue = new MeasureResource.IfcPressureMeasure((Ifc4.MeasureResource.IfcPressureMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcRadioActivityMeasure) 
				{
					AppliedValue = new MeasureResource.IfcRadioActivityMeasure((Ifc4.MeasureResource.IfcRadioActivityMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcRotationalFrequencyMeasure) 
				{
					AppliedValue = new MeasureResource.IfcRotationalFrequencyMeasure((Ifc4.MeasureResource.IfcRotationalFrequencyMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcRotationalMassMeasure) 
				{
					AppliedValue = new MeasureResource.IfcRotationalMassMeasure((Ifc4.MeasureResource.IfcRotationalMassMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcRotationalStiffnessMeasure) 
				{
					AppliedValue = new MeasureResource.IfcRotationalStiffnessMeasure((Ifc4.MeasureResource.IfcRotationalStiffnessMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcSectionModulusMeasure) 
				{
					AppliedValue = new MeasureResource.IfcSectionModulusMeasure((Ifc4.MeasureResource.IfcSectionModulusMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcSectionalAreaIntegralMeasure) 
				{
					AppliedValue = new MeasureResource.IfcSectionalAreaIntegralMeasure((Ifc4.MeasureResource.IfcSectionalAreaIntegralMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcShearModulusMeasure) 
				{
					AppliedValue = new MeasureResource.IfcShearModulusMeasure((Ifc4.MeasureResource.IfcShearModulusMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcSoundPowerLevelMeasure) 
				{
					AppliedValue = new MeasureResource.IfcSoundPowerMeasure((Ifc4.MeasureResource.IfcSoundPowerLevelMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcSoundPowerMeasure) 
				{
					AppliedValue = new MeasureResource.IfcSoundPowerMeasure((Ifc4.MeasureResource.IfcSoundPowerMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcSoundPressureLevelMeasure) 
				{
					AppliedValue = new MeasureResource.IfcSoundPressureMeasure((Ifc4.MeasureResource.IfcSoundPressureLevelMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcSoundPressureMeasure) 
				{
					AppliedValue = new MeasureResource.IfcSoundPressureMeasure((Ifc4.MeasureResource.IfcSoundPressureMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcSpecificHeatCapacityMeasure) 
				{
					AppliedValue = new MeasureResource.IfcSpecificHeatCapacityMeasure((Ifc4.MeasureResource.IfcSpecificHeatCapacityMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcTemperatureGradientMeasure) 
				{
					AppliedValue = new MeasureResource.IfcTemperatureGradientMeasure((Ifc4.MeasureResource.IfcTemperatureGradientMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcTemperatureRateOfChangeMeasure) 
				{
					AppliedValue = new MeasureResource.IfcTemperatureRateOfChangeMeasure((Ifc4.MeasureResource.IfcTemperatureRateOfChangeMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcThermalAdmittanceMeasure) 
				{
					AppliedValue = new MeasureResource.IfcThermalAdmittanceMeasure((Ifc4.MeasureResource.IfcThermalAdmittanceMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcThermalConductivityMeasure) 
				{
					AppliedValue = new MeasureResource.IfcThermalConductivityMeasure((Ifc4.MeasureResource.IfcThermalConductivityMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcThermalExpansionCoefficientMeasure) 
				{
					AppliedValue = new MeasureResource.IfcThermalExpansionCoefficientMeasure((Ifc4.MeasureResource.IfcThermalExpansionCoefficientMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcThermalResistanceMeasure) 
				{
					AppliedValue = new MeasureResource.IfcThermalResistanceMeasure((Ifc4.MeasureResource.IfcThermalResistanceMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcThermalTransmittanceMeasure) 
				{
					AppliedValue = new MeasureResource.IfcThermalTransmittanceMeasure((Ifc4.MeasureResource.IfcThermalTransmittanceMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcTorqueMeasure) 
				{
					AppliedValue = new MeasureResource.IfcTorqueMeasure((Ifc4.MeasureResource.IfcTorqueMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcVaporPermeabilityMeasure) 
				{
					AppliedValue = new MeasureResource.IfcVaporPermeabilityMeasure((Ifc4.MeasureResource.IfcVaporPermeabilityMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcVolumetricFlowRateMeasure) 
				{
					AppliedValue = new MeasureResource.IfcVolumetricFlowRateMeasure((Ifc4.MeasureResource.IfcVolumetricFlowRateMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcWarpingConstantMeasure) 
				{
					AppliedValue = new MeasureResource.IfcWarpingConstantMeasure((Ifc4.MeasureResource.IfcWarpingConstantMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcWarpingMomentMeasure) 
				{
					AppliedValue = new MeasureResource.IfcWarpingMomentMeasure((Ifc4.MeasureResource.IfcWarpingMomentMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcAmountOfSubstanceMeasure) 
				{
					AppliedValue = new MeasureResource.IfcAmountOfSubstanceMeasure((Ifc4.MeasureResource.IfcAmountOfSubstanceMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcAreaMeasure) 
				{
					AppliedValue = new MeasureResource.IfcAreaMeasure((Ifc4.MeasureResource.IfcAreaMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcComplexNumber) 
				{
					AppliedValue = new MeasureResource.IfcComplexNumber((Ifc4.MeasureResource.IfcComplexNumber)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcContextDependentMeasure) 
				{
					AppliedValue = new MeasureResource.IfcContextDependentMeasure((Ifc4.MeasureResource.IfcContextDependentMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcCountMeasure) 
				{
					AppliedValue = new MeasureResource.IfcCountMeasure((Ifc4.MeasureResource.IfcCountMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcDescriptiveMeasure) 
				{
					AppliedValue = new MeasureResource.IfcDescriptiveMeasure((Ifc4.MeasureResource.IfcDescriptiveMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcElectricCurrentMeasure) 
				{
					AppliedValue = new MeasureResource.IfcElectricCurrentMeasure((Ifc4.MeasureResource.IfcElectricCurrentMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcLengthMeasure) 
				{
					AppliedValue = new MeasureResource.IfcLengthMeasure((Ifc4.MeasureResource.IfcLengthMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcLuminousIntensityMeasure) 
				{
					AppliedValue = new MeasureResource.IfcLuminousIntensityMeasure((Ifc4.MeasureResource.IfcLuminousIntensityMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcMassMeasure) 
				{
					AppliedValue = new MeasureResource.IfcMassMeasure((Ifc4.MeasureResource.IfcMassMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcNonNegativeLengthMeasure) 
				{
					AppliedValue = new MeasureResource.IfcNonNegativeLengthMeasure((Ifc4.MeasureResource.IfcNonNegativeLengthMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcNormalisedRatioMeasure) 
				{
					AppliedValue = new MeasureResource.IfcNormalisedRatioMeasure((Ifc4.MeasureResource.IfcNormalisedRatioMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcNumericMeasure) 
				{
					AppliedValue = new MeasureResource.IfcNumericMeasure((Ifc4.MeasureResource.IfcNumericMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcParameterValue) 
				{
					AppliedValue = new MeasureResource.IfcParameterValue((Ifc4.MeasureResource.IfcParameterValue)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcPlaneAngleMeasure) 
				{
					AppliedValue = new MeasureResource.IfcPlaneAngleMeasure((Ifc4.MeasureResource.IfcPlaneAngleMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcPositiveLengthMeasure) 
				{
					AppliedValue = new MeasureResource.IfcPositiveLengthMeasure((Ifc4.MeasureResource.IfcPositiveLengthMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcPositivePlaneAngleMeasure) 
				{
					AppliedValue = new MeasureResource.IfcPositivePlaneAngleMeasure((Ifc4.MeasureResource.IfcPositivePlaneAngleMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcPositiveRatioMeasure) 
				{
					AppliedValue = new MeasureResource.IfcPositiveRatioMeasure((Ifc4.MeasureResource.IfcPositiveRatioMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcRatioMeasure) 
				{
					AppliedValue = new MeasureResource.IfcRatioMeasure((Ifc4.MeasureResource.IfcRatioMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcSolidAngleMeasure) 
				{
					AppliedValue = new MeasureResource.IfcSolidAngleMeasure((Ifc4.MeasureResource.IfcSolidAngleMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcThermodynamicTemperatureMeasure) 
				{
					AppliedValue = new MeasureResource.IfcThermodynamicTemperatureMeasure((Ifc4.MeasureResource.IfcThermodynamicTemperatureMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcTimeMeasure) 
				{
					AppliedValue = new MeasureResource.IfcTimeMeasure((Ifc4.MeasureResource.IfcTimeMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcVolumeMeasure) 
				{
					AppliedValue = new MeasureResource.IfcVolumeMeasure((Ifc4.MeasureResource.IfcVolumeMeasure)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcBinary) 
				{
					AppliedValue = new MeasureResource.IfcBinary((Ifc4.MeasureResource.IfcBinary)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcBoolean) 
				{
					AppliedValue = new MeasureResource.IfcBoolean((Ifc4.MeasureResource.IfcBoolean)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.DateTimeResource.IfcDate) 
				{
					AppliedValue = new DateTimeResource.IfcDate((Ifc4.DateTimeResource.IfcDate)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.DateTimeResource.IfcDateTime) 
				{
					AppliedValue = new DateTimeResource.IfcDateTime((Ifc4.DateTimeResource.IfcDateTime)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.DateTimeResource.IfcDuration) 
				{
					AppliedValue = new DateTimeResource.IfcDuration((Ifc4.DateTimeResource.IfcDuration)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcIdentifier) 
				{
					AppliedValue = new MeasureResource.IfcIdentifier((Ifc4.MeasureResource.IfcIdentifier)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcInteger) 
				{
					AppliedValue = new MeasureResource.IfcInteger((Ifc4.MeasureResource.IfcInteger)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcLabel) 
				{
					AppliedValue = new MeasureResource.IfcLabel((Ifc4.MeasureResource.IfcLabel)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcLogical) 
				{
					AppliedValue = new MeasureResource.IfcLogical((Ifc4.MeasureResource.IfcLogical)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcPositiveInteger) 
				{
					AppliedValue = new MeasureResource.IfcPositiveInteger((Ifc4.MeasureResource.IfcPositiveInteger)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcReal) 
				{
					AppliedValue = new MeasureResource.IfcReal((Ifc4.MeasureResource.IfcReal)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcText) 
				{
					AppliedValue = new MeasureResource.IfcText((Ifc4.MeasureResource.IfcText)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.DateTimeResource.IfcTime) 
				{
					AppliedValue = new DateTimeResource.IfcTime((Ifc4.DateTimeResource.IfcTime)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				if (value is Ifc4.DateTimeResource.IfcTimeStamp) 
				{
					AppliedValue = new DateTimeResource.IfcTimeStamp((Ifc4.DateTimeResource.IfcTimeStamp)value);
					if (_appliedValue4 != null)
						SetValue(v => _appliedValue4 = v, _appliedValue4, null, "AppliedValue", -3);
					return;
				}
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAppliedValue), 4)]
		IIfcMeasureWithUnit IIfcAppliedValue.UnitBasis 
		{ 
			get
			{
				return UnitBasis;
			} 
			set
			{
				UnitBasis = value as MeasureResource.IfcMeasureWithUnit;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAppliedValue), 5)]
		Ifc4.DateTimeResource.IfcDate? IIfcAppliedValue.ApplicableDate 
		{ 
			get
			{
				if (!ApplicableDate.HasValue) return null;
				return new Ifc4.DateTimeResource.IfcDate(ApplicableDate.Value);
			} 
			set
			{
				ApplicableDate = value.HasValue ? 
					new DateTimeResource.IfcDate(value.Value) :  
					 new DateTimeResource.IfcDate?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAppliedValue), 6)]
		Ifc4.DateTimeResource.IfcDate? IIfcAppliedValue.FixedUntilDate 
		{ 
			get
			{
				if (!FixedUntilDate.HasValue) return null;
				return new Ifc4.DateTimeResource.IfcDate(FixedUntilDate.Value);
			} 
			set
			{
				FixedUntilDate = value.HasValue ? 
					new DateTimeResource.IfcDate(value.Value) :  
					 new DateTimeResource.IfcDate?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAppliedValue), 7)]
		Ifc4.MeasureResource.IfcLabel? IIfcAppliedValue.Category 
		{ 
			get
			{
				if (!Category.HasValue) return null;
				return new Ifc4.MeasureResource.IfcLabel(Category.Value);
			} 
			set
			{
				Category = value.HasValue ? 
					new MeasureResource.IfcLabel(value.Value) :  
					 new MeasureResource.IfcLabel?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAppliedValue), 8)]
		Ifc4.MeasureResource.IfcLabel? IIfcAppliedValue.Condition 
		{ 
			get
			{
				if (!Condition.HasValue) return null;
				return new Ifc4.MeasureResource.IfcLabel(Condition.Value);
			} 
			set
			{
				Condition = value.HasValue ? 
					new MeasureResource.IfcLabel(value.Value) :  
					 new MeasureResource.IfcLabel?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAppliedValue), 9)]
		Ifc4.Interfaces.IfcArithmeticOperatorEnum? IIfcAppliedValue.ArithmeticOperator 
		{ 
			get
			{
				//## Custom code to handle enumeration of ArithmeticOperator
				//##
				switch (ArithmeticOperator)
				{
					case IfcArithmeticOperatorEnum.ADD:
						return Ifc4.Interfaces.IfcArithmeticOperatorEnum.ADD;
					case IfcArithmeticOperatorEnum.DIVIDE:
						return Ifc4.Interfaces.IfcArithmeticOperatorEnum.DIVIDE;
					case IfcArithmeticOperatorEnum.MODULO:
						//## Handle translation of MODULO member from IfcArithmeticOperatorEnum in property ArithmeticOperator
						throw new System.NotSupportedException("MODULO operation only supported in IFC4.3+");
						//##
					case IfcArithmeticOperatorEnum.MULTIPLY:
						return Ifc4.Interfaces.IfcArithmeticOperatorEnum.MULTIPLY;
					case IfcArithmeticOperatorEnum.SUBTRACT:
						return Ifc4.Interfaces.IfcArithmeticOperatorEnum.SUBTRACT;
					case null: 
						return null;
					
					default:
						throw new System.ArgumentOutOfRangeException();
				}
			} 
			set
			{
				//## Custom code to handle setting of enumeration of ArithmeticOperator
				//##
				switch (value)
				{
					case Ifc4.Interfaces.IfcArithmeticOperatorEnum.ADD:
						ArithmeticOperator = IfcArithmeticOperatorEnum.ADD;
						return;
					case Ifc4.Interfaces.IfcArithmeticOperatorEnum.DIVIDE:
						ArithmeticOperator = IfcArithmeticOperatorEnum.DIVIDE;
						return;
					case Ifc4.Interfaces.IfcArithmeticOperatorEnum.MULTIPLY:
						ArithmeticOperator = IfcArithmeticOperatorEnum.MULTIPLY;
						return;
					case Ifc4.Interfaces.IfcArithmeticOperatorEnum.SUBTRACT:
						ArithmeticOperator = IfcArithmeticOperatorEnum.SUBTRACT;
						return;
					
					case null:
						ArithmeticOperator = null;
						return;
					default:
						throw new System.ArgumentOutOfRangeException();
				}
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAppliedValue), 10)]
		IEnumerable<IIfcAppliedValue> IIfcAppliedValue.Components 
		{ 
			get
			{
			
				return new Common.Collections.ProxyItemSet<IfcAppliedValue, IIfcAppliedValue>(Components);
			} 
		}
		IEnumerable<IIfcExternalReferenceRelationship> IIfcAppliedValue.HasExternalReference 
		{ 
			get
			{
				return Model.Instances.Where<IIfcExternalReferenceRelationship>(e => e.RelatedResourceObjects != null &&  e.RelatedResourceObjects.Contains(this), "RelatedResourceObjects", this);
			} 
		}
	//## Custom code
	//##
	}
}